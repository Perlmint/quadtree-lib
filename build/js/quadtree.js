var Quadtree;Quadtree=function(){function e(t){var i,n;if(this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,null==this.width||null==this.height)throw new Error("Missing quadtree dimensions.");if(this.x<0||this.y<0||this.width<1||this.height<1)throw new Error("Dimensions must be positive integers.");null==this.x&&(this.x=0),null==this.y&&(this.y=0),this.contents=[],this.oversized=[],this.size=0,n=this,this.children={NW:{create:function(){return new e({x:n.x,y:n.y,width:Math.max(Math.floor(n.width/2),1),height:Math.max(Math.floor(n.height/2),1)})},tree:null},NE:{create:function(){return new e({x:n.x+Math.max(Math.floor(n.width/2),1),y:n.y,width:Math.ceil(n.width/2),height:Math.max(Math.floor(n.height/2),1)})},tree:null},SW:{create:function(){return new e({x:n.x,y:n.y+Math.min(Math.floor(n.height/2),1),width:Math.min(Math.floor(n.width/2),1),height:Math.ceil(n.height/2)})},tree:null},SE:{create:function(){return new e({x:n.x+Math.max(Math.floor(n.width/2),1),y:n.y+Math.max(Math.floor(n.height/2),1),width:Math.ceil(n.width/2),height:Math.ceil(n.height/2)})},tree:null}};for(i in this.children)this.children[i].get=function(){return null!=this.tree?this.tree:(this.tree=this.create(),this.tree)}}var t,i,n,h;return i=function(e){var t,i;return{x:Math.floor((null!=(t=e.width)?t:1)/2)+e.x,y:Math.floor((null!=(i=e.height)?i:1)/2)+e.y}},h=function(e){if(null==e.x||null==e.y||e.x<0||e.y<0)throw new Error("Object must contain x or y positions as arguments, and they must be positive integers.");if((null!=e?e.width:void 0)<1||(null!=e?e.height:void 0)<1)throw new Error("Width and height arguments must be greater than 0.")},t=function(e,t){var n;return n=i(t),e.x<n.x?e.y<n.y?"NW":"SW":e.y<n.y?"NE":"SE"},n=function(e,t){var i,n;return e.x<t.x||e.x+(null!=(i=e.width)?i:1)>=t.x+t.width||e.y<t.y||e.y+(null!=(n=e.height)?n:1)>=t.y+t.height},e.prototype.push=function(e){var i,r,l,o,s,u,d,c,f;for(h(e),l=[{tree:this,element:e}];l.length>0;)if(c=l.splice(0,1)[0],f=c.tree,r=c.element,f.size++,d=f.children[t(r,f)],1===f.width||1===f.height||n(r,d.create()))f.oversized.push(r);else if(1===f.size)f.contents.push(r);else{for(l.push({tree:d.get(),element:r}),u=f.contents,o=0,s=u.length;s>o;o++)i=u[o],l.push({tree:f.children[t(i,f)].get(),element:i});f.contents=[]}return this},e.prototype.remove=function(e){var i,n;return h(e),i=this.oversized.indexOf(e),i>-1?(this.oversized.splice(i,1),this.size--,!0):(i=this.contents.indexOf(e),i>-1?(this.oversized.splice(i,1),this.size--,!0):(n=this.children[t(e,this)],null==n.tree?!1:n.tree.remove(e)?(this.size--,0===n.tree.size&&(n.tree=null),!0):!1))},e.prototype.colliding=function(e,i){var r,l,o,s,u,d,c,f,a,g,y,p;for(h(e),null==i&&(i=function(e,t){var i,n,h,r;return!(e.x>t.x+(null!=(i=t.width)?i:1)||e.x+(null!=(n=e.width)?n:1)<t.x||e.y>t.y+(null!=(h=t.height)?h:1)||e.y+(null!=(r=e.height)?r:1)<t.y)}),s=[],o=[this];o.length>0;){for(p=o.splice(0,1)[0],a=p.oversized,u=0,c=a.length;c>u;u++)l=a[u],l!==e&&i(e,l)&&s.push(l);for(g=p.contents,d=0,f=g.length;f>d;d++)l=g[d],l!==e&&i(e,l)&&s.push(l);if(y=p.children[t(e,this)],n(e,y.create()))for(r in p.children)null!=p.children[r].tree&&o.push(p.children[r].tree);else null!=y.tree&&o.push(y.tree)}return s},e.prototype.each=function(e){var t,i,n,h,r,l,o,s,u,d;for(i=[this];i.length>0;){for(d=i.splice(0,1)[0],s=d.oversized,h=0,l=s.length;l>h;h++)n=s[h],"function"==typeof e&&e(n);for(u=d.contents,r=0,o=u.length;o>r;r++)n=u[r],"function"==typeof e&&e(n);for(t in d.children)null!=d.children[t].tree&&i.push(d.children[t].tree)}return this},e.prototype.filter=function(t){var i;return(i=function(n){var h,r,l,o,s,u,d,c,f,a,g;r=new e({x:n.x,y:n.y,width:n.width,height:n.height}),r.size=0;for(h in n.children)null!=n.children[h].tree&&(r.children[h].tree=i(n.children[h].tree),r.size+=null!=(c=null!=(f=r.children[h].tree)?f.size:void 0)?c:0);for(a=n.oversized,o=0,u=a.length;u>o;o++)l=a[o],(null==t||("function"==typeof t?t(l):void 0))&&r.oversized.push(l);for(g=n.contents,s=0,d=g.length;d>s;s++)l=g[s],(null==t||("function"==typeof t?t(l):void 0))&&r.contents.push(l);return r.size+=r.oversized.length+r.contents.length,0===r.size?null:r})(this)},e.prototype.visit=function(e){var t,i,n;for(i=[this];i.length>0;){n=i.splice(0,1)[0],e.bind(n)();for(t in n.children)null!=n.children[t].tree&&i.push(n.children[t].tree)}return this},e}(),"undefined"!=typeof module&&null!==module&&(module.exports=Quadtree);
//# sourceMappingURL=data:application/json;base64,
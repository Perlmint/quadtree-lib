{"version":3,"file":"quadtree.js","sources":["quadtree.coffee"],"names":[],"mappings":"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","sourcesContent":["# quadtree-lib\n# ============\n#\n# **Quadtree-lib** is an easy to use, developer friendly quadtree library\n# which contains many helper methods to add, remove, iterate, filter, simulate\n# collisions over 2d elements and more.\n\n# #### UMD bundling related code\n((root, factory) ->\n    if typeof define is 'function' and define.amd\n        define [], factory\n    else if typeof exports is 'object' and module.exports\n        module.exports = factory()\n    else\n        root[\"Quadtree\"] = factory()\n) @, () ->\n# The Quadtree class\n# -------------------\nclass Quadtree\n    # ### Constructor\n\n    # The quadtree constructor accepts a single parameter object containing the following properties :\n    # - width / length : dimensions of the quadtree. [ *mandatory* ]\n    # - maxElements : the maximum number of elements before the leaf 'splits' into subtrees. [ *defaults to 1* ]\n    # - x / y : these coordinates are used internally by the library to position subtrees. [ *internal use only* ]\n    constructor: ({@x, @y, @width, @height, @maxElements}) ->\n\n        # An error is thrown when the width & length are not passed as constructor arguments.\n        throw new Error \"Missing quadtree dimensions.\" if not @width? or not @height?\n        @x ?= 0\n        @y ?= 0\n        @maxElements ?= 1\n        @contents = []\n        @oversized = []\n        @size = 0\n\n        # Dimension & coordinates are checked, an error is thrown in case of bad input.\n        throw new Error \"Dimensions and coordinates must be positive integers.\" if @x < 0 or @y < 0 or @width < 1 or @height < 1\n        throw new Error \"The maximum number of elements before a split must be a positive integer.\" if @maxElements < 1\n\n        that = @\n\n        # The subtrees list, by position.\n        @children = {\n            # Northwest tree.\n            \"NW\":\n                create: () ->\n                    new Quadtree({\n                        x: that.x\n                        y: that.y\n                        width: Math.max (Math.floor that.width / 2), 1\n                        height: Math.max (Math.floor that.height / 2), 1\n                        maxElements: that.maxElements\n                    })\n                tree: null\n            # Northeast tree.\n            \"NE\":\n                create: () ->\n                    new Quadtree({\n                        x: that.x + Math.max (Math.floor that.width / 2), 1\n                        y: that.y\n                        width: Math.ceil that.width / 2\n                        height: Math.max (Math.floor that.height / 2), 1\n                        maxElements: that.maxElements\n                    })\n                tree: null\n            # Southwest tree.\n            \"SW\":\n                create: () ->\n                    new Quadtree({\n                        x: that.x\n                        y: that.y + Math.max (Math.floor that.height / 2), 1\n                        width: Math.max (Math.floor that.width / 2), 1\n                        height: Math.ceil that.height / 2\n                        maxElements: that.maxElements\n                    })\n                tree: null\n            # Southeast tree.\n            \"SE\":\n                create: () ->\n                    new Quadtree({\n                        x: that.x + Math.max (Math.floor that.width / 2), 1\n                        y: that.y + Math.max (Math.floor that.height / 2), 1\n                        width: Math.ceil that.width / 2\n                        height: Math.ceil that.height / 2\n                        maxElements: that.maxElements\n                    })\n                tree: null\n        }\n        # Adding a getter which lazily creates the tree.\n        for child of @children\n            @children[child].get = () ->\n                if @tree? then @tree else @tree = @create(); @tree\n\n    # ### Internal methods & vars\n\n    # Retrieves the center coordinates of a rectangle.\n    getCenter = (item) ->\n        x: Math.floor((item.width  ? 1) / 2) + item.x\n        y: Math.floor((item.height ? 1) / 2) + item.y\n\n    # Validates a potential element of the tree.\n    validateElement = (element) ->\n        if not typeof element is \"object\" or not element.x? or not element.y? or element.x < 0 or element.y < 0\n            throw new Error \"Object must contain x or y positions as arguments, and they must be positive integers.\"\n        if element?.width < 0 or element?.height < 0\n            throw new Error \"Width and height must be positive integers.\"\n\n    # Determines which subtree an element belongs to.\n    calculateDirection = (element, tree) ->\n        quadCenter = getCenter tree\n\n        if element.x < quadCenter.x\n            if element.y < quadCenter.y then \"NW\"\n            else \"SW\"\n        else\n            if element.y < quadCenter.y then \"NE\"\n            else \"SE\"\n\n    # Determines if an element is oversized.\n    # An oversized element is an element 'too big' to fit into the tree.\n    isOversized = (element, tree) ->\n        element.x < tree.x or\n        element.x + (element.width ? 0) >= tree.x + tree.width or\n        element.y < tree.y or\n        element.y + (element.height ? 0) >= tree.y + tree.height\n\n    # Add getters and setters for coordinates and dimensions properties in order to automatically reorganize the elements on change.\n    observe = (item, tree) ->\n        writeAccessors = (propName) ->\n            item[\"_#{propName}\"] = item[propName]\n            Object.defineProperty item, propName, {\n                set: (val) ->\n                    tree.remove @\n                    @[\"_#{propName}\"] = val\n                    tree.push @\n                get: ->\n                    @[\"_#{propName}\"]\n                configurable: true\n            }\n        writeAccessors \"x\"\n        writeAccessors \"y\"\n        writeAccessors \"width\"\n        writeAccessors \"height\"\n\n    # ### Exposed methods\n\n    # Add an element to the quadtree.\n    # Elements can be observed to reorganize them into the quadtree automatically whenever their coordinates or dimensions are set (for ex. obj.x = ...).\n    push: (item, doObserve) ->\n        @pushAll([item], doObserve)\n\n    # Push an array of elements.\n    pushAll : (items, doObserve) ->\n        for item in items\n            validateElement item\n            observe item, @ if doObserve\n\n        fifo = [tree: @, elements: items]\n\n        while fifo.length > 0\n            top = fifo.shift()\n            tree = top.tree\n            elements = top.elements\n\n            fifoCandidates = { \"NW\": null, \"NE\": null, \"SW\": null, \"SE\": null }\n\n            for element in elements\n                tree.size++\n\n                direction = calculateDirection element, tree\n                relatedChild = tree.children[direction]\n\n                if tree.width is 1 or tree.height is 1 or isOversized element, relatedChild.create()\n                    tree.oversized.push element\n\n                else if (tree.size - tree.oversized.length) <= tree.maxElements\n                    tree.contents.push element\n\n                else\n                    fifoCandidates[direction] ?= { tree: relatedChild.get(), elements: [] }\n                    fifoCandidates[direction].elements.push(element)\n\n                    for content in tree.contents\n                        contentDir = calculateDirection content, tree\n                        fifoCandidates[contentDir] ?= { tree: tree.children[contentDir].get(), elements: [] }\n                        fifoCandidates[contentDir].elements.push(content)\n\n                    tree.contents = []\n\n            for direction, candidate of fifoCandidates\n                if candidate? then fifo.push candidate\n\n        @\n\n    # Removes an element from the quadtree.\n    remove: (item) ->\n        validateElement item\n\n        index = @oversized.indexOf item\n        if index > - 1\n            @oversized.splice index, 1\n            @size--\n            return true\n        index = @contents.indexOf item\n        if index > - 1\n            @contents.splice index, 1\n            @size--\n            return true\n\n        relatedChild = @children[calculateDirection item, @]\n        if not relatedChild.tree?\n            return false\n\n        if relatedChild.tree.remove item\n            @size--\n            relatedChild.tree = null if relatedChild.tree.size is 0\n            true\n        else\n            false\n\n    # Returns an array of elements which collides with the `item` argument.\n    # `item` being an object having x, y, width & height properties.\n\n    # The default collision function is a basic bounding box algorithm.\n    # You can change it by providing a function as a second argument.\n    #```javascript\n    #colliding({x: 10, y: 20}, function(element1, element2){\n    #    return //Predicate\n    #})\n    #```\n    colliding: (item, collisionFunction) ->\n        validateElement item\n\n        boundingBoxCollision = (elt1, elt2) ->\n            not(elt1.x > elt2.x + (elt2.width ? 0)      or\n                elt1.x + (elt1.width ? 0) < elt2.x      or\n                elt1.y > elt2.y + (elt2.height ? 0)     or\n                elt1.y + (elt1.height ? 0) < elt2.y)\n\n        collisionFunction ?= boundingBoxCollision\n\n        items = []\n        fifo  = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n\n            for elt in top.oversized when elt isnt item and collisionFunction item, elt then items.push elt\n            for elt in top.contents  when elt isnt item and collisionFunction item, elt then items.push elt\n\n            relatedChild = top.children[calculateDirection item, top]\n\n            if isOversized item, relatedChild.create()\n                for child of top.children\n                    if top.children[child].tree? and boundingBoxCollision(top.children[child].tree, item)\n                        fifo.push top.children[child].tree\n\n            else if relatedChild.tree?\n                fifo.push relatedChild.tree\n\n        items\n\n    # Alias of `where`.\n    get: (query) ->\n        @where query\n    # Returns an array of elements that match the `query` argument.\n    where: (query) ->\n        # Naïve parsing (missing coordinates)\n        if typeof query is \"object\" and not query.x? and not query.y?\n            return @find (elt) ->\n                check = true\n                for key of query when query[key] isnt elt[key] then check = false\n                check\n\n        # Optimised parsing\n        validateElement query\n\n        items = []\n        fifo = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n\n            for elt in top.oversized\n                check = true\n                for key of query when query[key] isnt elt[key] then check = false\n                items.push elt if check\n            for elt in top.contents\n                check = true\n                for key of query when query[key] isnt elt[key] then check = false\n                items.push elt if check\n\n            relatedChild = top.children[calculateDirection query, top]\n\n            if relatedChild.tree?\n                fifo.push relatedChild.tree\n\n        items\n\n    # For each element of the quadtree, performs the `action` function.\n    #```javascript\n    #quad.each(function(item){ console.log(item) })\n    #```\n    each: (action) ->\n        fifo = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n            for i in top.oversized then action?(i)\n            for i in top.contents then action?(i)\n\n            for child of top.children when top.children[child].tree?\n                fifo.push top.children[child].tree\n        @\n\n    # Returns an array of elements which validate the predicate.\n    find: (predicate) ->\n        fifo = [@]\n        items = []\n\n        while fifo.length > 0\n            top = fifo.shift()\n            for i in top.oversized when predicate?(i) then items.push i\n            for i in top.contents when predicate?(i) then items.push i\n\n            for child of top.children when top.children[child].tree?\n                fifo.push top.children[child].tree\n        items\n\n    # Returns a **cloned** `Quadtree` object which contains only the elements that validate the predicate.\n    filter: (predicate) ->\n        deepclone = (target) ->\n            copycat = new Quadtree x: target.x, y: target.y, width: target.width, height: target.height, maxElements: target.maxElements\n            copycat.size = 0\n            for child of target.children when target.children[child].tree?\n                copycat.children[child].tree = deepclone target.children[child].tree\n                copycat.size += copycat.children[child].tree?.size ? 0\n\n            for item in target.oversized when not predicate? or predicate?(item)\n                copycat.oversized.push item\n            for item in target.contents when not predicate? or predicate?(item)\n                copycat.contents.push item\n\n            copycat.size += copycat.oversized.length + copycat.contents.length\n            if copycat.size is 0 then null else copycat\n\n        deepclone @\n\n    # Opposite of filter.\n    reject: (predicate) ->\n        @filter (i) ->\n            not predicate?(i)\n\n    # Visits each tree & subtree contained in the `Quadtree` object.\n    # For each node, performs the `action` function, inside which `this` is bound to the node tree object.\n    visit: (action) ->\n        fifo = [@]\n\n        while fifo.length > 0\n            that = fifo.shift()\n            action.bind(that)()\n\n            for child of that.children when that.children[child].tree?\n                fifo.push that.children[child].tree\n        @\n\n    # Pretty printing function.\n    pretty: () ->\n        str = \"\"\n\n        indent = (level) ->\n            res = \"\"\n            res += \"   \" for times in [level...0]\n            res\n\n        fifo  = [{ label: \"ROOT\", tree: @, level: 0 }]\n        while fifo.length > 0\n            top = fifo.shift()\n            indentation = indent(top.level)\n            str += \"\"\"\n                   #{indentation}| #{top.label}\n                   #{indentation}| ------------\\n\n                   \"\"\"\n\n            if top.tree.oversized.length > 0\n                str += \"\"\"\n                       #{indentation}| * Oversized elements *\n                       #{indentation}|   #{top.tree.oversized}\\n\n                       \"\"\"\n\n            if top.tree.contents.length > 0\n                str += \"\"\"\n                       #{indentation}| * Leaf content *\n                       #{indentation}|   #{top.tree.contents}\\n\n                       \"\"\"\n\n            isParent = false\n            for child of top.tree.children when top.tree.children[child].tree?\n                isParent = true\n                fifo.unshift { label: child, tree: top.tree.children[child].tree, level: top.level + 1 }\n\n            if isParent then str += \"#{indentation}└──┐\\n\"\n\n        str\n"]}
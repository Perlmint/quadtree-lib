var Quadtree;Quadtree=function(){function e(t){var n,i;if(this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this.maxElements=t.maxElements,null==this.width||null==this.height)throw new Error("Missing quadtree dimensions.");if(null==this.x&&(this.x=0),null==this.y&&(this.y=0),null==this.maxElements&&(this.maxElements=1),this.contents=[],this.oversized=[],this.size=0,this.x<0||this.y<0||this.width<1||this.height<1)throw new Error("Dimensions and coordinates must be positive integers.");if(this.maxElements<1)throw new Error("The maximum number of elements before a split must be a positive integer.");i=this,this.children={NW:{create:function(){return new e({x:i.x,y:i.y,width:Math.max(Math.floor(i.width/2),1),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},NE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y,width:Math.ceil(i.width/2),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},SW:{create:function(){return new e({x:i.x,y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.max(Math.floor(i.width/2),1),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null},SE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.ceil(i.width/2),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null}};for(n in this.children)this.children[n].get=function(){return null!=this.tree?this.tree:(this.tree=this.create(),this.tree)}}var t,n,i,r,h;return n=function(e){var t,n;return{x:Math.floor((null!=(t=e.width)?t:1)/2)+e.x,y:Math.floor((null!=(n=e.height)?n:1)/2)+e.y}},h=function(e){if(null==e.x||null==e.y||e.x<0||e.y<0)throw new Error("Object must contain x or y positions as arguments, and they must be positive integers.");if((null!=e?e.width:void 0)<0||(null!=e?e.height:void 0)<0)throw new Error("Width and height must be positive integers.")},t=function(e,t){var i;return i=n(t),e.x<i.x?e.y<i.y?"NW":"SW":e.y<i.y?"NE":"SE"},i=function(e,t){var n,i;return e.x<t.x||e.x+(null!=(n=e.width)?n:0)>=t.x+t.width||e.y<t.y||e.y+(null!=(i=e.height)?i:0)>=t.y+t.height},r=function(e,t){var n;return n=function(n){return e["_"+n]=e[n],Object.defineProperty(e,n,{set:function(e){return t.remove(this),this["_"+n]=e,t.push(this)},get:function(){return this["_"+n]},configurable:!0})},n("x"),n("y"),n("width"),n("height")},e.prototype.push=function(e,t){return this.pushAll([e],t)},e.prototype.pushAll=function(e,n){var l,o,s,u,f,c,d,a,p,m,g,x,y,v,w,z,E,M,b;for(m=0,y=e.length;m<y;m++)p=e[m],h(p),n&&r(p,this);for(d=[{tree:this,elements:e}];d.length>0;){for(M=d.shift(),b=M.tree,c=M.elements,a={NW:null,NE:null,SW:null,SE:null},g=0,v=c.length;g<v;g++)if(f=c[g],b.size++,u=t(f,b),E=b.children[u],1===b.width||1===b.height||i(f,E.create()))b.oversized.push(f);else if(b.size<=b.maxElements)b.contents.push(f);else{for(null==a[u]&&(a[u]={tree:E.get(),elements:[]}),a[u].elements.push(f),z=b.contents,x=0,w=z.length;x<w;x++)o=z[x],s=t(o,b),null==a[s]&&(a[s]={tree:b.children[s].get(),elements:[]}),a[s].elements.push(o);b.contents=[]}for(u in a)l=a[u],null!=l&&d.push(l)}return this},e.prototype.remove=function(e){var n,i;return h(e),n=this.oversized.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(n=this.contents.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(i=this.children[t(e,this)],null!=i.tree&&(!!i.tree.remove(e)&&(this.size--,0===i.tree.size&&(i.tree=null),!0))))},e.prototype.colliding=function(e,n){var r,l,o,s,u,f,c,d,a,p,m,g,x;for(h(e),r=function(e,t){var n,i,r,h;return!(e.x>t.x+(null!=(n=t.width)?n:0)||e.x+(null!=(i=e.width)?i:0)<t.x||e.y>t.y+(null!=(r=t.height)?r:0)||e.y+(null!=(h=e.height)?h:0)<t.y)},null==n&&(n=r),u=[],s=[this];s.length>0;){for(x=s.shift(),p=x.oversized,f=0,d=p.length;f<d;f++)o=p[f],o!==e&&n(e,o)&&u.push(o);for(m=x.contents,c=0,a=m.length;c<a;c++)o=m[c],o!==e&&n(e,o)&&u.push(o);if(g=x.children[t(e,x)],i(e,g.create()))for(l in x.children)null!=x.children[l].tree&&r(x.children[l].tree,e)&&s.push(x.children[l].tree);else null!=g.tree&&s.push(g.tree)}return u},e.prototype.get=function(e){return this.where(e)},e.prototype.where=function(e){var n,i,r,l,o,s,u,f,c,d,a,p,m;if("object"==typeof e&&null==e.x&&null==e.y)return this.find(function(t){var n,i;n=!0;for(i in e)e[i]!==t[i]&&(n=!1);return n});for(h(e),l=[],r=[this];r.length>0;){for(m=r.shift(),d=m.oversized,o=0,f=d.length;o<f;o++){i=d[o],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}for(a=m.contents,s=0,c=a.length;s<c;s++){i=a[s],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}p=m.children[t(e,m)],null!=p.tree&&r.push(p.tree)}return l},e.prototype.each=function(e){var t,n,i,r,h,l,o,s,u,f;for(n=[this];n.length>0;){for(f=n.shift(),s=f.oversized,r=0,l=s.length;r<l;r++)i=s[r],"function"==typeof e&&e(i);for(u=f.contents,h=0,o=u.length;h<o;h++)i=u[h],"function"==typeof e&&e(i);for(t in f.children)null!=f.children[t].tree&&n.push(f.children[t].tree)}return this},e.prototype.find=function(e){var t,n,i,r,h,l,o,s,u,f,c;for(n=[this],r=[];n.length>0;){for(c=n.shift(),u=c.oversized,h=0,o=u.length;h<o;h++)i=u[h],("function"==typeof e?e(i):void 0)&&r.push(i);for(f=c.contents,l=0,s=f.length;l<s;l++)i=f[l],("function"==typeof e?e(i):void 0)&&r.push(i);for(t in c.children)null!=c.children[t].tree&&n.push(c.children[t].tree)}return r},e.prototype.filter=function(t){var n;return(n=function(i){var r,h,l,o,s,u,f,c,d,a,p;h=new e({x:i.x,y:i.y,width:i.width,height:i.height,maxElements:i.maxElements}),h.size=0;for(r in i.children)null!=i.children[r].tree&&(h.children[r].tree=n(i.children[r].tree),h.size+=null!=(c=null!=(d=h.children[r].tree)?d.size:void 0)?c:0);for(a=i.oversized,o=0,u=a.length;o<u;o++)l=a[o],(null==t||("function"==typeof t?t(l):void 0))&&h.oversized.push(l);for(p=i.contents,s=0,f=p.length;s<f;s++)l=p[s],(null==t||("function"==typeof t?t(l):void 0))&&h.contents.push(l);return h.size+=h.oversized.length+h.contents.length,0===h.size?null:h})(this)},e.prototype.reject=function(e){return this.filter(function(t){return!("function"==typeof e?e(t):void 0)})},e.prototype.visit=function(e){var t,n,i;for(n=[this];n.length>0;){i=n.shift(),e.bind(i)();for(t in i.children)null!=i.children[t].tree&&n.push(i.children[t].tree)}return this},e.prototype.pretty=function(){var e,t,n,i,r,h,l;for(h="",n=function(e){var t,n,i,r;for(i="",r=t=n=e;n<=0?t<0:t>0;r=n<=0?++t:--t)i+="   ";return i},t=[{label:"ROOT",tree:this,level:0}];t.length>0;){l=t.shift(),i=n(l.level),h+=i+"| "+l.label+"\n"+i+"| ------------\n",l.tree.oversized.length>0&&(h+=i+"| * Oversized elements *\n"+i+"|   "+l.tree.oversized+"\n"),l.tree.contents.length>0&&(h+=i+"| * Leaf content *\n"+i+"|   "+l.tree.contents+"\n"),r=!1;for(e in l.tree.children)null!=l.tree.children[e].tree&&(r=!0,t.unshift({label:e,tree:l.tree.children[e].tree,level:l.level+1}));r&&(h+=i+"└──┐\n")}return h},e}(),"undefined"!=typeof module&&null!==module&&(module.exports=Quadtree);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

var Quadtree;Quadtree=function(){function e(t){var n,i;if(this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this.maxElements=t.maxElements,null==this.width||null==this.height)throw new Error("Missing quadtree dimensions.");if(null==this.x&&(this.x=0),null==this.y&&(this.y=0),null==this.maxElements&&(this.maxElements=1),this.contents=[],this.oversized=[],this.size=0,this.x<0||this.y<0||this.width<1||this.height<1)throw new Error("Dimensions must be positive integers.");if(this.maxElements<1)throw new Error("The maximum of elements by leaf must be a positive integer.");i=this,this.children={NW:{create:function(){return new e({x:i.x,y:i.y,width:Math.max(Math.floor(i.width/2),1),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},NE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y,width:Math.ceil(i.width/2),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},SW:{create:function(){return new e({x:i.x,y:i.y+Math.min(Math.floor(i.height/2),1),width:Math.max(Math.floor(i.width/2),1),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null},SE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.ceil(i.width/2),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null}};for(n in this.children)this.children[n].get=function(){return null!=this.tree?this.tree:(this.tree=this.create(),this.tree)}}var t,n,i,h;return n=function(e){var t,n;return{x:Math.floor((null!=(t=e.width)?t:1)/2)+e.x,y:Math.floor((null!=(n=e.height)?n:1)/2)+e.y}},h=function(e){if(null==e.x||null==e.y||e.x<0||e.y<0)throw new Error("Object must contain x or y positions as arguments, and they must be positive integers.");if((null!=e?e.width:void 0)<0||(null!=e?e.height:void 0)<0)throw new Error("Width and height arguments must be positive integers.")},t=function(e,t){var i;return i=n(t),e.x<i.x?e.y<i.y?"NW":"SW":e.y<i.y?"NE":"SE"},i=function(e,t){var n,i;return e.x<t.x||e.x+(null!=(n=e.width)?n:0)>=t.x+t.width||e.y<t.y||e.y+(null!=(i=e.height)?i:0)>=t.y+t.height},e.prototype.push=function(e){var n,r,l,s,o,u,c,d,f;for(h(e),l=[{tree:this,element:e}];l.length>0;)if(d=l.splice(0,1)[0],f=d.tree,r=d.element,f.size++,c=f.children[t(r,f)],1===f.width||1===f.height||i(r,c.create()))f.oversized.push(r);else if(f.size<=f.maxElements)f.contents.push(r);else{for(l.push({tree:c.get(),element:r}),u=f.contents,s=0,o=u.length;o>s;s++)n=u[s],l.push({tree:f.children[t(n,f)].get(),element:n});f.contents=[]}return this},e.prototype.remove=function(e){var n,i;return h(e),n=this.oversized.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(n=this.contents.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(i=this.children[t(e,this)],null==i.tree?!1:i.tree.remove(e)?(this.size--,0===i.tree.size&&(i.tree=null),!0):!1))},e.prototype.colliding=function(e,n){var r,l,s,o,u,c,d,f,a,m,p,x;for(h(e),null==n&&(n=function(e,t){var n,i,h,r;return!(e.x>t.x+(null!=(n=t.width)?n:0)||e.x+(null!=(i=e.width)?i:0)<t.x||e.y>t.y+(null!=(h=t.height)?h:0)||e.y+(null!=(r=e.height)?r:0)<t.y)}),o=[],s=[this];s.length>0;){for(x=s.splice(0,1)[0],a=x.oversized,u=0,d=a.length;d>u;u++)l=a[u],l!==e&&n(e,l)&&o.push(l);for(m=x.contents,c=0,f=m.length;f>c;c++)l=m[c],l!==e&&n(e,l)&&o.push(l);if(p=x.children[t(e,x)],i(e,p.create()))for(r in x.children)null!=x.children[r].tree&&s.push(x.children[r].tree);else null!=p.tree&&s.push(p.tree)}return o},e.prototype.get=function(e){return this.where(e)},e.prototype.where=function(e){var n,i,r,l,s,o,u,c,d,f,a,m,p;for(h(e),l=[],r=[this];r.length>0;){for(p=r.splice(0,1)[0],f=p.oversized,s=0,c=f.length;c>s;s++){i=f[s],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}for(a=p.contents,o=0,d=a.length;d>o;o++){i=a[o],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}m=p.children[t(e,p)],null!=m.tree&&r.push(m.tree)}return l},e.prototype.each=function(e){var t,n,i,h,r,l,s,o,u,c;for(n=[this];n.length>0;){for(c=n.splice(0,1)[0],o=c.oversized,h=0,l=o.length;l>h;h++)i=o[h],"function"==typeof e&&e(i);for(u=c.contents,r=0,s=u.length;s>r;r++)i=u[r],"function"==typeof e&&e(i);for(t in c.children)null!=c.children[t].tree&&n.push(c.children[t].tree)}return this},e.prototype.find=function(e){var t,n,i,h,r,l,s,o,u,c,d;for(n=[this],h=[];n.length>0;){for(d=n.splice(0,1)[0],u=d.oversized,r=0,s=u.length;s>r;r++)i=u[r],("function"==typeof e?e(i):void 0)&&h.push(i);for(c=d.contents,l=0,o=c.length;o>l;l++)i=c[l],("function"==typeof e?e(i):void 0)&&h.push(i);for(t in d.children)null!=d.children[t].tree&&n.push(d.children[t].tree)}return h},e.prototype.filter=function(t){var n;return(n=function(i){var h,r,l,s,o,u,c,d,f,a,m;r=new e({x:i.x,y:i.y,width:i.width,height:i.height,maxElements:i.maxElements}),r.size=0;for(h in i.children)null!=i.children[h].tree&&(r.children[h].tree=n(i.children[h].tree),r.size+=null!=(d=null!=(f=r.children[h].tree)?f.size:void 0)?d:0);for(a=i.oversized,s=0,u=a.length;u>s;s++)l=a[s],(null==t||("function"==typeof t?t(l):void 0))&&r.oversized.push(l);for(m=i.contents,o=0,c=m.length;c>o;o++)l=m[o],(null==t||("function"==typeof t?t(l):void 0))&&r.contents.push(l);return r.size+=r.oversized.length+r.contents.length,0===r.size?null:r})(this)},e.prototype.visit=function(e){var t,n,i;for(n=[this];n.length>0;){i=n.splice(0,1)[0],e.bind(i)();for(t in i.children)null!=i.children[t].tree&&n.push(i.children[t].tree)}return this},e}(),"undefined"!=typeof module&&null!==module&&(module.exports=Quadtree);
//# sourceMappingURL=data:application/json;base64,
var Quadtree;Quadtree=function(){function e(t){var n,i;if(this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this.maxElements=t.maxElements,null==this.width||null==this.height)throw new Error("Missing quadtree dimensions.");if(null==this.x&&(this.x=0),null==this.y&&(this.y=0),null==this.maxElements&&(this.maxElements=1),this.contents=[],this.oversized=[],this.size=0,this.x<0||this.y<0||this.width<1||this.height<1)throw new Error("Dimensions must be positive integers.");if(this.maxElements<1)throw new Error("The maximum of elements by leaf must be a positive integer.");i=this,this.children={NW:{create:function(){return new e({x:i.x,y:i.y,width:Math.max(Math.floor(i.width/2),1),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},NE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y,width:Math.ceil(i.width/2),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},SW:{create:function(){return new e({x:i.x,y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.max(Math.floor(i.width/2),1),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null},SE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.ceil(i.width/2),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null}};for(n in this.children)this.children[n].get=function(){return null!=this.tree?this.tree:(this.tree=this.create(),this.tree)}}var t,n,i,h,r;return n=function(e){var t,n;return{x:Math.floor((null!=(t=e.width)?t:1)/2)+e.x,y:Math.floor((null!=(n=e.height)?n:1)/2)+e.y}},r=function(e){if(null==e.x||null==e.y||e.x<0||e.y<0)throw new Error("Object must contain x or y positions as arguments, and they must be positive integers.");if((null!=e?e.width:void 0)<0||(null!=e?e.height:void 0)<0)throw new Error("Width and height arguments must be positive integers.")},t=function(e,t){var i;return i=n(t),e.x<i.x?e.y<i.y?"NW":"SW":e.y<i.y?"NE":"SE"},i=function(e,t){var n,i;return e.x<t.x||e.x+(null!=(n=e.width)?n:0)>=t.x+t.width||e.y<t.y||e.y+(null!=(i=e.height)?i:0)>=t.y+t.height},h=function(e,t){var n;return n=function(n){return e["_"+n]=e[n],Object.defineProperty(e,n,{set:function(e){return t.remove(this),this["_"+n]=e,t.push(this)},get:function(){return this["_"+n]},configurable:!0})},n("x"),n("y"),n("width"),n("height")},e.prototype.push=function(e,n){var l,s,o,u,c,f,d,a,m;for(r(e),n&&h(e,this),o=[{tree:this,element:e}];o.length>0;)if(a=o.splice(0,1)[0],m=a.tree,s=a.element,m.size++,d=m.children[t(s,m)],1===m.width||1===m.height||i(s,d.create()))m.oversized.push(s);else if(m.size<=m.maxElements)m.contents.push(s);else{for(o.push({tree:d.get(),element:s}),f=m.contents,u=0,c=f.length;c>u;u++)l=f[u],o.push({tree:m.children[t(l,m)].get(),element:l});m.contents=[]}return this},e.prototype.remove=function(e){var n,i;return r(e),n=this.oversized.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(n=this.contents.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(i=this.children[t(e,this)],null==i.tree?!1:i.tree.remove(e)?(this.size--,0===i.tree.size&&(i.tree=null),!0):!1))},e.prototype.colliding=function(e,n){var h,l,s,o,u,c,f,d,a,m,p,x;for(r(e),null==n&&(n=function(e,t){var n,i,h,r;return!(e.x>t.x+(null!=(n=t.width)?n:0)||e.x+(null!=(i=e.width)?i:0)<t.x||e.y>t.y+(null!=(h=t.height)?h:0)||e.y+(null!=(r=e.height)?r:0)<t.y)}),o=[],s=[this];s.length>0;){for(x=s.splice(0,1)[0],a=x.oversized,u=0,f=a.length;f>u;u++)l=a[u],l!==e&&n(e,l)&&o.push(l);for(m=x.contents,c=0,d=m.length;d>c;c++)l=m[c],l!==e&&n(e,l)&&o.push(l);if(p=x.children[t(e,x)],i(e,p.create()))for(h in x.children)null!=x.children[h].tree&&s.push(x.children[h].tree);else null!=p.tree&&s.push(p.tree)}return o},e.prototype.get=function(e){return this.where(e)},e.prototype.where=function(e){var n,i,h,l,s,o,u,c,f,d,a,m,p;for(r(e),l=[],h=[this];h.length>0;){for(p=h.splice(0,1)[0],d=p.oversized,s=0,c=d.length;c>s;s++){i=d[s],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}for(a=p.contents,o=0,f=a.length;f>o;o++){i=a[o],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}m=p.children[t(e,p)],null!=m.tree&&h.push(m.tree)}return l},e.prototype.each=function(e){var t,n,i,h,r,l,s,o,u,c;for(n=[this];n.length>0;){for(c=n.splice(0,1)[0],o=c.oversized,h=0,l=o.length;l>h;h++)i=o[h],"function"==typeof e&&e(i);for(u=c.contents,r=0,s=u.length;s>r;r++)i=u[r],"function"==typeof e&&e(i);for(t in c.children)null!=c.children[t].tree&&n.push(c.children[t].tree)}return this},e.prototype.find=function(e){var t,n,i,h,r,l,s,o,u,c,f;for(n=[this],h=[];n.length>0;){for(f=n.splice(0,1)[0],u=f.oversized,r=0,s=u.length;s>r;r++)i=u[r],("function"==typeof e?e(i):void 0)&&h.push(i);for(c=f.contents,l=0,o=c.length;o>l;l++)i=c[l],("function"==typeof e?e(i):void 0)&&h.push(i);for(t in f.children)null!=f.children[t].tree&&n.push(f.children[t].tree)}return h},e.prototype.filter=function(t){var n;return(n=function(i){var h,r,l,s,o,u,c,f,d,a,m;r=new e({x:i.x,y:i.y,width:i.width,height:i.height,maxElements:i.maxElements}),r.size=0;for(h in i.children)null!=i.children[h].tree&&(r.children[h].tree=n(i.children[h].tree),r.size+=null!=(f=null!=(d=r.children[h].tree)?d.size:void 0)?f:0);for(a=i.oversized,s=0,u=a.length;u>s;s++)l=a[s],(null==t||("function"==typeof t?t(l):void 0))&&r.oversized.push(l);for(m=i.contents,o=0,c=m.length;c>o;o++)l=m[o],(null==t||("function"==typeof t?t(l):void 0))&&r.contents.push(l);return r.size+=r.oversized.length+r.contents.length,0===r.size?null:r})(this)},e.prototype.visit=function(e){var t,n,i;for(n=[this];n.length>0;){i=n.splice(0,1)[0],e.bind(i)();for(t in i.children)null!=i.children[t].tree&&n.push(i.children[t].tree)}return this},e}(),"undefined"!=typeof module&&null!==module&&(module.exports=Quadtree);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1YWR0cmVlLmNvZmZlZSIsInF1YWR0cmVlLmpzIl0sIm5hbWVzIjpbIlF1YWR0cmVlIiwiYXJnIiwiY2hpbGQiLCJ0aGF0IiwidGhpcyIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJtYXhFbGVtZW50cyIsIkVycm9yIiwiY29udGVudHMiLCJvdmVyc2l6ZWQiLCJzaXplIiwiY2hpbGRyZW4iLCJOVyIsImNyZWF0ZSIsIk1hdGgiLCJtYXgiLCJmbG9vciIsInRyZWUiLCJORSIsImNlaWwiLCJTVyIsIlNFIiwiZ2V0IiwiY2FsY3VsYXRlRGlyZWN0aW9uIiwiZ2V0Q2VudGVyIiwiaXNPdmVyc2l6ZWQiLCJvYnNlcnZlIiwidmFsaWRhdGVFbGVtZW50IiwiaXRlbSIsInJlZiIsInJlZjEiLCJlbGVtZW50IiwicXVhZENlbnRlciIsIndyaXRlQWNjZXNzb3JzIiwicHJvcE5hbWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInNldCIsInZhbCIsInJlbW92ZSIsInB1c2giLCJjb25maWd1cmFibGUiLCJwcm90b3R5cGUiLCJlbmFibGVPYnNlcnZlIiwiYyIsImZpZm8iLCJqIiwibGVuIiwicmVsYXRlZENoaWxkIiwidG9wIiwibGVuZ3RoIiwic3BsaWNlIiwiaW5kZXgiLCJpbmRleE9mIiwiY29sbGlkaW5nIiwiY29sbGlzaW9uRnVuY3Rpb24iLCJlbHQiLCJpdGVtcyIsImsiLCJsZW4xIiwiZWx0MSIsImVsdDIiLCJyZWYyIiwicmVmMyIsInBhcmFtcyIsIndoZXJlIiwiY2hlY2siLCJrZXkiLCJlYWNoIiwiYWN0aW9uIiwiaSIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaWx0ZXIiLCJkZWVwY2xvbmUiLCJ0YXJnZXQiLCJjb3B5Y2F0IiwidmlzaXQiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0EsR0FBQUEsU0FBTUEsVUFBQSxXQU9XLFFBQUFBLEdBQUNDLEdBRVYsR0FBQUMsR0FBQUMsQ0FBQSxJQUZXQyxLQUFDQyxF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RUFBS1csU0FBU1osR0FBT2tCLE1Dc0czQyxNRHJHSWhCLE9Dd0dDSixLQUlhLG1CQUFYa0YsU0FBcUMsT0FBWEEsU0R6R3JDQSxPQUFRQyxRQUFVbkYiLCJmaWxlIjoicXVhZHRyZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIHF1YWR0cmVlLWxpYlxuIyA9PT09PT09PT09PT1cbiNcbiMgKipRdWFkdHJlZS1saWIqKiBpcyBhbiBlYXN5IHRvIHVzZSwgZGV2ZWxvcGVyIGZyaWVuZGx5IHF1YWR0cmVlIGxpYnJhcnlcbiMgd2hpY2ggY29udGFpbnMgbWFueSBoZWxwZXIgbWV0aG9kcyB0byBhZGQsIHJlbW92ZSwgaXRlcmF0ZSwgZmlsdGVyLCBzaW11bGF0ZVxuIyBjb2xsaXNpb25zIG92ZXIgMmQgZWxlbWVudHMgYW5kIG1vcmUuXG4jXG4jIFRoZSBRdWFkdHJlZSBjbGFzcy5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLVxuY2xhc3MgUXVhZHRyZWVcbiAgICAjICMjIyBDb25zdHJ1Y3RvclxuXG4gICAgIyBBIHF1YWR0cmVlIGlzIGJ1aWx0IHdpdGggNSBtYWluIHBhcmFtZXRlcnMgOlxuICAgICMgLSB4ICYgeSBjb29yZGluYXRlcyB3aGljaCBhcmUgYWx3YXlzICgwLDApIGZvciB0aGUgcm9vdCB0cmVlLlxuICAgICMgLSBpdHMgZGltZW5zaW9ucyAod2lkdGggJiBsZW5ndGgpLCBtYW5kYXRvcnkuXG4gICAgIyAtIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbGVtZW50cyBiZWZvcmUgaXQgJ3NwbGl0cycgaW50byBzdWJ0cmVlcy4gKGRlZmF1bHRzIHRvIDEpXG4gICAgY29uc3RydWN0b3I6ICh7QHgsIEB5LCBAd2lkdGgsIEBoZWlnaHQsIEBtYXhFbGVtZW50c30pIC0+XG4gICAgICAgICMgQW4gZXJyb3IgaXMgdGhyb3duIHdoZW4gdGhlIHdpZHRoICYgbGVuZ3RoIGFyZSBub3QgcGFzc2VkIGFzIGNvbnN0cnVjdG9yIGFyZ3VtZW50cy5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiTWlzc2luZyBxdWFkdHJlZSBkaW1lbnNpb25zLlwiIGlmIG5vdCBAd2lkdGg/IG9yIG5vdCBAaGVpZ2h0P1xuICAgICAgICBAeCA/PSAwXG4gICAgICAgIEB5ID89IDBcbiAgICAgICAgQG1heEVsZW1lbnRzID89IDFcbiAgICAgICAgQGNvbnRlbnRzID0gW11cbiAgICAgICAgQG92ZXJzaXplZCA9IFtdXG4gICAgICAgIEBzaXplID0gMFxuXG4gICAgICAgICMgRGltZW5zaW9uICYgY29vcmRpbmF0ZXMgYXJlIGNoZWNrZWQsIGFuZCBlbiBlcnJvciBpcyB0aHJvd24gaW4gY2FzZSBvZiBiYWQgaW5wdXQuXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcIkRpbWVuc2lvbnMgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2Vycy5cIiBpZiBAeCA8IDAgb3IgQHkgPCAwIG9yIEB3aWR0aCA8IDEgb3IgQGhlaWdodCA8IDFcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiVGhlIG1heGltdW0gb2YgZWxlbWVudHMgYnkgbGVhZiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci5cIiBpZiBAbWF4RWxlbWVudHMgPCAxXG5cbiAgICAgICAgdGhhdCA9IEBcblxuICAgICAgICAjIFRoZSBzdWJ0cmVlcyBsaXN0LCBieSBwb3NpdGlvbi4gQ29udGFpbnMgdGhlIHN1YnRyZWUsIGEgY3JlYXRpb24gbWV0aG9kIHdpdGggcHJvcGVyIGNvb3JkaW5hdGVzICYgZGltZW5zaW9ucyBhbmQgYSBnZXR0ZXIuXG4gICAgICAgIEBjaGlsZHJlbiA9IHtcbiAgICAgICAgICAgICMgTm9ydGh3ZXN0IHRyZWUuXG4gICAgICAgICAgICBcIk5XXCI6XG4gICAgICAgICAgICAgICAgY3JlYXRlOiAoKSAtPlxuICAgICAgICAgICAgICAgICAgICBuZXcgUXVhZHRyZWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhhdC54XG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGF0LnlcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBNYXRoLm1heCAoTWF0aC5mbG9vciB0aGF0LndpZHRoIC8gMiksIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogTWF0aC5tYXggKE1hdGguZmxvb3IgdGhhdC5oZWlnaHQgLyAyKSwgMVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RWxlbWVudHM6IHRoYXQubWF4RWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0cmVlOiBudWxsXG4gICAgICAgICAgICAjIE5vcnRoZWFzdCB0cmVlLlxuICAgICAgICAgICAgXCJORVwiOlxuICAgICAgICAgICAgICAgIGNyZWF0ZTogKCkgLT5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFF1YWR0cmVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoYXQueCArIE1hdGgubWF4IChNYXRoLmZsb29yIHRoYXQud2lkdGggLyAyKSwgMVxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhhdC55XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogTWF0aC5jZWlsIHRoYXQud2lkdGggLyAyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4IChNYXRoLmZsb29yIHRoYXQuaGVpZ2h0IC8gMiksIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEVsZW1lbnRzOiB0aGF0Lm1heEVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgdHJlZTogbnVsbFxuICAgICAgICAgICAgIyBTb3V0aHdlc3QgdHJlZS5cbiAgICAgICAgICAgIFwiU1dcIjpcbiAgICAgICAgICAgICAgICBjcmVhdGU6ICgpIC0+XG4gICAgICAgICAgICAgICAgICAgIG5ldyBRdWFkdHJlZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGF0LnhcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoYXQueSArIE1hdGgubWF4IChNYXRoLmZsb29yIHRoYXQuaGVpZ2h0IC8gMiksIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBNYXRoLm1heCAoTWF0aC5mbG9vciB0aGF0LndpZHRoIC8gMiksIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsIHRoYXQuaGVpZ2h0IC8gMlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RWxlbWVudHM6IHRoYXQubWF4RWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0cmVlOiBudWxsXG4gICAgICAgICAgICAjIFNvdXRoZWFzdCB0cmVlLlxuICAgICAgICAgICAgXCJTRVwiOlxuICAgICAgICAgICAgICAgIGNyZWF0ZTogKCkgLT5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFF1YWR0cmVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoYXQueCArIE1hdGgubWF4IChNYXRoLmZsb29yIHRoYXQud2lkdGggLyAyKSwgMVxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhhdC55ICsgTWF0aC5tYXggKE1hdGguZmxvb3IgdGhhdC5oZWlnaHQgLyAyKSwgMVxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IE1hdGguY2VpbCB0aGF0LndpZHRoIC8gMlxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwgdGhhdC5oZWlnaHQgLyAyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhFbGVtZW50czogdGhhdC5tYXhFbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHRyZWU6IG51bGxcbiAgICAgICAgfVxuICAgICAgICAjIEFkZGluZyBhIGdldHRlciB3aGljaCBhbHNvIGNyZWF0ZXMgdGhlIHRyZWUgaWYgbmVlZGVkLlxuICAgICAgICBmb3IgY2hpbGQgb2YgQGNoaWxkcmVuXG4gICAgICAgICAgICBAY2hpbGRyZW5bY2hpbGRdLmdldCA9ICgpIC0+XG4gICAgICAgICAgICAgICAgaWYgQHRyZWU/IHRoZW4gQHRyZWUgZWxzZSBAdHJlZSA9IEBjcmVhdGUoKTsgQHRyZWVcblxuICAgICMgIyMjIEludGVybmFsIG1ldGhvZHMgJiB2YXJzXG5cbiAgICAjIFJldHJpZXZlcyB0aGUgY2VudGVyIGNvb3JkaW5hdGVzIG9mIGFuIGVsZW1lbnQuXG4gICAgZ2V0Q2VudGVyID0gKGl0ZW0pIC0+XG4gICAgICAgIHg6IE1hdGguZmxvb3IoKGl0ZW0ud2lkdGggID8gMSkgLyAyKSArIGl0ZW0ueFxuICAgICAgICB5OiBNYXRoLmZsb29yKChpdGVtLmhlaWdodCA/IDEpIC8gMikgKyBpdGVtLnlcblxuICAgICMgVmFsaWRhdGVzIGFuIGVsZW1lbnQgb2YgdGhlIHF1YWR0cmVlLCBieSBjaGVja2luZyBpdHMgcHJvcGVydGllcyBmb3IgeCAmIHkgY29vcmRpbmF0ZXMsIGFuZCBwcm9wZXIgdmFsdWUuXG4gICAgdmFsaWRhdGVFbGVtZW50ID0gKGVsZW1lbnQpIC0+XG4gICAgICAgIGlmIG5vdCB0eXBlb2YgZWxlbWVudCBpcyBcIm9iamVjdFwiIG9yIG5vdCBlbGVtZW50Lng/IG9yIG5vdCBlbGVtZW50Lnk/IG9yIGVsZW1lbnQueCA8IDAgb3IgZWxlbWVudC55IDwgMFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiT2JqZWN0IG11c3QgY29udGFpbiB4IG9yIHkgcG9zaXRpb25zIGFzIGFyZ3VtZW50cywgYW5kIHRoZXkgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2Vycy5cIlxuICAgICAgICBpZiBlbGVtZW50Py53aWR0aCA8IDAgb3IgZWxlbWVudD8uaGVpZ2h0IDwgMFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiV2lkdGggYW5kIGhlaWdodCBhcmd1bWVudHMgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2Vycy5cIlxuXG4gICAgIyBDYWxjdWxhdGVzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHN1YnRyZWUgd2hpY2ggYW4gZWxlbWVudCBiZWxvbmdzIHRvLlxuICAgIGNhbGN1bGF0ZURpcmVjdGlvbiA9IChlbGVtZW50LCB0cmVlKSAtPlxuICAgICAgICBlbGVtZW50XG4gICAgICAgIHF1YWRDZW50ZXIgPSBnZXRDZW50ZXIgdHJlZVxuXG4gICAgICAgIGlmIGVsZW1lbnQueCA8IHF1YWRDZW50ZXIueFxuICAgICAgICAgICAgaWYgZWxlbWVudC55IDwgcXVhZENlbnRlci55IHRoZW4gXCJOV1wiXG4gICAgICAgICAgICBlbHNlIFwiU1dcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiBlbGVtZW50LnkgPCBxdWFkQ2VudGVyLnkgdGhlbiBcIk5FXCJcbiAgICAgICAgICAgIGVsc2UgXCJTRVwiXG5cbiAgICAjIERldGVybWluZXMgaWYgYW4gZWxlbWVudCBpcyBvdmVyc2l6ZWQuIEFuIG92ZXJzaXplZCBlbGVtZW50IGlzIGFuIGVsZW1lbnQgJ3RvbyBiaWcnIHRvIGZpdCBpbnRvIHN1YnRyZWVzLlxuICAgIGlzT3ZlcnNpemVkID0gKGVsZW1lbnQsIHRyZWUpIC0+XG4gICAgICAgIGVsZW1lbnQueCA8IHRyZWUueCBvclxuICAgICAgICBlbGVtZW50LnggKyAoZWxlbWVudC53aWR0aCA/IDApID49IHRyZWUueCArIHRyZWUud2lkdGggb3JcbiAgICAgICAgZWxlbWVudC55IDwgdHJlZS55IG9yXG4gICAgICAgIGVsZW1lbnQueSArIChlbGVtZW50LmhlaWdodCA/IDApID49IHRyZWUueSArIHRyZWUuaGVpZ2h0XG5cbiAgICAjIEFkZCBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGZvciBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucyBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIGF1dG9tYXRpY2FsbHkgcmVvcmdhbml6ZSB0aGUgZWxlbWVudHMgaW50byB0aGUgcXVhZHRyZWUgb24gY2hhbmdlLlxuICAgIG9ic2VydmUgPSAoaXRlbSwgdHJlZSkgLT5cbiAgICAgICAgd3JpdGVBY2Nlc3NvcnMgPSAocHJvcE5hbWUpIC0+XG4gICAgICAgICAgICBpdGVtW1wiXyN7cHJvcE5hbWV9XCJdID0gaXRlbVtwcm9wTmFtZV1cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpdGVtLCBwcm9wTmFtZSwge1xuICAgICAgICAgICAgICAgIHNldDogKHZhbCkgLT5cbiAgICAgICAgICAgICAgICAgICAgdHJlZS5yZW1vdmUgQFxuICAgICAgICAgICAgICAgICAgICBAW1wiXyN7cHJvcE5hbWV9XCJdID0gdmFsXG4gICAgICAgICAgICAgICAgICAgIHRyZWUucHVzaCBAXG4gICAgICAgICAgICAgICAgZ2V0OiAtPlxuICAgICAgICAgICAgICAgICAgICBAW1wiXyN7cHJvcE5hbWV9XCJdXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIHdyaXRlQWNjZXNzb3JzIFwieFwiXG4gICAgICAgIHdyaXRlQWNjZXNzb3JzIFwieVwiXG4gICAgICAgIHdyaXRlQWNjZXNzb3JzIFwid2lkdGhcIlxuICAgICAgICB3cml0ZUFjY2Vzc29ycyBcImhlaWdodFwiXG5cbiAgICAjICMjIyBFeHBvc2VkIG1ldGhvZHNcblxuICAgICMgQWRkIGFuIGVsZW1lbnQgdG8gdGhlIHF1YWR0cmVlLlxuICAgIHB1c2g6IChpdGVtLCBlbmFibGVPYnNlcnZlKSAtPlxuICAgICAgICB2YWxpZGF0ZUVsZW1lbnQgaXRlbVxuICAgICAgICBvYnNlcnZlIGl0ZW0sIEAgaWYgZW5hYmxlT2JzZXJ2ZVxuXG4gICAgICAgIGZpZm8gPSBbdHJlZTogQCwgZWxlbWVudDogaXRlbV1cblxuICAgICAgICB3aGlsZSBmaWZvLmxlbmd0aCA+IDBcbiAgICAgICAgICAgIHRvcCA9IGZpZm8uc3BsaWNlKDAsIDEpWzBdXG4gICAgICAgICAgICB0cmVlID0gdG9wLnRyZWVcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0b3AuZWxlbWVudFxuXG4gICAgICAgICAgICB0cmVlLnNpemUrK1xuXG4gICAgICAgICAgICByZWxhdGVkQ2hpbGQgPSB0cmVlLmNoaWxkcmVuW2NhbGN1bGF0ZURpcmVjdGlvbiBlbGVtZW50LCB0cmVlXVxuXG4gICAgICAgICAgICBpZiB0cmVlLndpZHRoIGlzIDEgb3IgdHJlZS5oZWlnaHQgaXMgMSBvciBpc092ZXJzaXplZCBlbGVtZW50LCByZWxhdGVkQ2hpbGQuY3JlYXRlKClcbiAgICAgICAgICAgICAgICB0cmVlLm92ZXJzaXplZC5wdXNoIGVsZW1lbnRcblxuICAgICAgICAgICAgZWxzZSBpZiB0cmVlLnNpemUgPD0gdHJlZS5tYXhFbGVtZW50c1xuICAgICAgICAgICAgICAgIHRyZWUuY29udGVudHMucHVzaCBlbGVtZW50XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBmaWZvLnB1c2ggdHJlZTogcmVsYXRlZENoaWxkLmdldCgpLCBlbGVtZW50OiBlbGVtZW50XG5cbiAgICAgICAgICAgICAgICBmb3IgYyBpbiB0cmVlLmNvbnRlbnRzXG4gICAgICAgICAgICAgICAgICAgIGZpZm8ucHVzaCB0cmVlOiB0cmVlLmNoaWxkcmVuW2NhbGN1bGF0ZURpcmVjdGlvbiBjLCB0cmVlXS5nZXQoKSwgZWxlbWVudDogY1xuXG4gICAgICAgICAgICAgICAgdHJlZS5jb250ZW50cyA9IFtdXG4gICAgICAgIEBcblxuICAgICMgUmVtb3ZlcyBhbiBlbGVtZW50IGZyb20gdGhlIHF1YWR0cmVlLlxuICAgIHJlbW92ZTogKGl0ZW0pIC0+XG4gICAgICAgIHZhbGlkYXRlRWxlbWVudCBpdGVtXG5cbiAgICAgICAgaW5kZXggPSBAb3ZlcnNpemVkLmluZGV4T2YgaXRlbVxuICAgICAgICBpZiBpbmRleCA+IC0gMVxuICAgICAgICAgICAgQG92ZXJzaXplZC5zcGxpY2UgaW5kZXgsIDFcbiAgICAgICAgICAgIEBzaXplLS1cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIGluZGV4ID0gQGNvbnRlbnRzLmluZGV4T2YgaXRlbVxuICAgICAgICBpZiBpbmRleCA+IC0gMVxuICAgICAgICAgICAgQG92ZXJzaXplZC5zcGxpY2UgaW5kZXgsIDFcbiAgICAgICAgICAgIEBzaXplLS1cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG5cbiAgICAgICAgcmVsYXRlZENoaWxkID0gQGNoaWxkcmVuW2NhbGN1bGF0ZURpcmVjdGlvbiBpdGVtLCBAXVxuICAgICAgICBpZiBub3QgcmVsYXRlZENoaWxkLnRyZWU/XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcblxuICAgICAgICBpZiByZWxhdGVkQ2hpbGQudHJlZS5yZW1vdmUgaXRlbVxuICAgICAgICAgICAgQHNpemUtLVxuICAgICAgICAgICAgcmVsYXRlZENoaWxkLnRyZWUgPSBudWxsIGlmIHJlbGF0ZWRDaGlsZC50cmVlLnNpemUgaXMgMFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmYWxzZVxuXG4gICAgIyBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHdoaWNoIGNvbGxpZGVzIHdpdGggYGl0ZW1gIHByb3ZpZGVkYC5cblxuICAgICMgYGl0ZW1gIGlzIGFuIG9iamVjdCBoYXZpbmcgeCwgeSwgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcy5cblxuICAgICMgVGhlIGRlZmF1bHQgY29sbGlzaW9uIGZ1bmN0aW9uIGlzIGEgYmFzaWMgYm91bmRpbmcgYm94IGFsZ29yaXRobS4gWW91IGNhbiBjaGFuZ2UgaXQgYnkgcHJvdmlkaW5nIGEgZnVuY3Rpb24gYXMgYSBzZWNvbmQgYXJndW1lbnQuXG4gICAgI2BgYGphdmFzY3JpcHRcbiAgICAjY29sbGlkaW5nKHt4OiAxMCwgeTogMjB9LCBmdW5jdGlvbihlbGVtZW50MSwgZWxlbWVudDIpe1xuICAgICMgICAgcmV0dXJuIC8vUHJlZGljYXRlXG4gICAgI30pXG4gICAgI2BgYFxuICAgIGNvbGxpZGluZzogKGl0ZW0sIGNvbGxpc2lvbkZ1bmN0aW9uKSAtPlxuICAgICAgICB2YWxpZGF0ZUVsZW1lbnQgaXRlbVxuXG4gICAgICAgIGlmIG5vdCBjb2xsaXNpb25GdW5jdGlvbj9cbiAgICAgICAgICAgIGNvbGxpc2lvbkZ1bmN0aW9uID0gKGVsdDEsIGVsdDIpIC0+XG4gICAgICAgICAgICAgICAgbm90KGVsdDEueCA+IGVsdDIueCArIChlbHQyLndpZHRoID8gMCkgICAgICBvclxuICAgICAgICAgICAgICAgICAgICBlbHQxLnggKyAoZWx0MS53aWR0aCA/IDApIDwgZWx0Mi54ICAgICAgb3JcbiAgICAgICAgICAgICAgICAgICAgZWx0MS55ID4gZWx0Mi55ICsgKGVsdDIuaGVpZ2h0ID8gMCkgICAgIG9yXG4gICAgICAgICAgICAgICAgICAgIGVsdDEueSArIChlbHQxLmhlaWdodCA/IDApIDwgZWx0Mi55KVxuXG4gICAgICAgIGl0ZW1zID0gW11cbiAgICAgICAgZmlmbyA9IFtAXVxuXG4gICAgICAgIHdoaWxlIGZpZm8ubGVuZ3RoID4gMFxuICAgICAgICAgICAgdG9wID0gZmlmby5zcGxpY2UoMCwgMSlbMF1cblxuICAgICAgICAgICAgZm9yIGVsdCBpbiB0b3Aub3ZlcnNpemVkIHdoZW4gZWx0IGlzbnQgaXRlbSBhbmQgY29sbGlzaW9uRnVuY3Rpb24gaXRlbSwgZWx0IHRoZW4gaXRlbXMucHVzaCBlbHRcbiAgICAgICAgICAgIGZvciBlbHQgaW4gdG9wLmNvbnRlbnRzICB3aGVuIGVsdCBpc250IGl0ZW0gYW5kIGNvbGxpc2lvbkZ1bmN0aW9uIGl0ZW0sIGVsdCB0aGVuIGl0ZW1zLnB1c2ggZWx0XG5cbiAgICAgICAgICAgIHJlbGF0ZWRDaGlsZCA9IHRvcC5jaGlsZHJlbltjYWxjdWxhdGVEaXJlY3Rpb24gaXRlbSwgdG9wXVxuXG4gICAgICAgICAgICBpZiBpc092ZXJzaXplZCBpdGVtLCByZWxhdGVkQ2hpbGQuY3JlYXRlKClcbiAgICAgICAgICAgICAgICBmb3IgY2hpbGQgb2YgdG9wLmNoaWxkcmVuIHdoZW4gdG9wLmNoaWxkcmVuW2NoaWxkXS50cmVlP1xuICAgICAgICAgICAgICAgICAgICBmaWZvLnB1c2ggdG9wLmNoaWxkcmVuW2NoaWxkXS50cmVlXG5cbiAgICAgICAgICAgIGVsc2UgaWYgcmVsYXRlZENoaWxkLnRyZWU/XG4gICAgICAgICAgICAgICAgZmlmby5wdXNoIHJlbGF0ZWRDaGlsZC50cmVlXG5cbiAgICAgICAgaXRlbXNcblxuICAgICMgQWxpYXMgb2YgYHdoZXJlYC5cbiAgICBnZXQ6IChwYXJhbXMpIC0+XG4gICAgICAgIEB3aGVyZSBwYXJhbXNcbiAgICAjIFJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgdGhhdCBtYXRjaCB0aGUgcGFyYW1ldGVyIHByb3BlcnRpZXMuXG4gICAgd2hlcmU6IChwYXJhbXMpIC0+XG4gICAgICAgIHZhbGlkYXRlRWxlbWVudCBwYXJhbXNcblxuICAgICAgICBpdGVtcyA9IFtdXG4gICAgICAgIGZpZm8gPSBbQF1cblxuICAgICAgICB3aGlsZSBmaWZvLmxlbmd0aCA+IDBcbiAgICAgICAgICAgIHRvcCA9IGZpZm8uc3BsaWNlKDAsIDEpWzBdXG5cbiAgICAgICAgICAgIGZvciBlbHQgaW4gdG9wLm92ZXJzaXplZFxuICAgICAgICAgICAgICAgIGNoZWNrID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGZvciBrZXkgb2YgcGFyYW1zIHdoZW4gcGFyYW1zW2tleV0gaXNudCBlbHRba2V5XSB0aGVuIGNoZWNrID0gZmFsc2VcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoIGVsdCBpZiBjaGVja1xuICAgICAgICAgICAgZm9yIGVsdCBpbiB0b3AuY29udGVudHNcbiAgICAgICAgICAgICAgICBjaGVjayA9IHRydWVcbiAgICAgICAgICAgICAgICBmb3Iga2V5IG9mIHBhcmFtcyB3aGVuIHBhcmFtc1trZXldIGlzbnQgZWx0W2tleV0gdGhlbiBjaGVjayA9IGZhbHNlXG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCBlbHQgaWYgY2hlY2tcblxuICAgICAgICAgICAgcmVsYXRlZENoaWxkID0gdG9wLmNoaWxkcmVuW2NhbGN1bGF0ZURpcmVjdGlvbiBwYXJhbXMsIHRvcF1cblxuICAgICAgICAgICAgaWYgcmVsYXRlZENoaWxkLnRyZWU/XG4gICAgICAgICAgICAgICAgZmlmby5wdXNoIHJlbGF0ZWRDaGlsZC50cmVlXG5cbiAgICAgICAgaXRlbXNcblxuICAgICMgRm9yIGVhY2ggZWxlbWVudCwgcGVyZm9ybXMgYGFjdGlvbmAgd2hlcmUgYGFjdGlvbmAgaXMgYSBmdW5jdGlvbi5cbiAgICAjYGBgamF2YXNjcmlwdFxuICAgICNxdWFkLmVhY2goZnVuY3Rpb24oaXRlbSl7IGNvbnNvbGUubG9nKGl0ZW0pIH0pXG4gICAgI2BgYFxuICAgIGVhY2g6IChhY3Rpb24pIC0+XG4gICAgICAgIGZpZm8gPSBbQF1cblxuICAgICAgICB3aGlsZSBmaWZvLmxlbmd0aCA+IDBcbiAgICAgICAgICAgIHRvcCA9IGZpZm8uc3BsaWNlKDAsIDEpWzBdXG4gICAgICAgICAgICBmb3IgaSBpbiB0b3Aub3ZlcnNpemVkIHRoZW4gYWN0aW9uPyhpKVxuICAgICAgICAgICAgZm9yIGkgaW4gdG9wLmNvbnRlbnRzIHRoZW4gYWN0aW9uPyhpKVxuXG4gICAgICAgICAgICBmb3IgY2hpbGQgb2YgdG9wLmNoaWxkcmVuIHdoZW4gdG9wLmNoaWxkcmVuW2NoaWxkXS50cmVlP1xuICAgICAgICAgICAgICAgIGZpZm8ucHVzaCB0b3AuY2hpbGRyZW5bY2hpbGRdLnRyZWVcbiAgICAgICAgQFxuXG4gICAgIyBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHdoaWNoIHZhbGlkYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgZmluZDogKHByZWRpY2F0ZSkgLT5cbiAgICAgICAgZmlmbyA9IFtAXVxuICAgICAgICBpdGVtcyA9IFtdXG5cbiAgICAgICAgd2hpbGUgZmlmby5sZW5ndGggPiAwXG4gICAgICAgICAgICB0b3AgPSBmaWZvLnNwbGljZSgwLCAxKVswXVxuICAgICAgICAgICAgZm9yIGkgaW4gdG9wLm92ZXJzaXplZCB3aGVuIHByZWRpY2F0ZT8oaSkgdGhlbiBpdGVtcy5wdXNoIGlcbiAgICAgICAgICAgIGZvciBpIGluIHRvcC5jb250ZW50cyB3aGVuIHByZWRpY2F0ZT8oaSkgdGhlbiBpdGVtcy5wdXNoIGlcblxuICAgICAgICAgICAgZm9yIGNoaWxkIG9mIHRvcC5jaGlsZHJlbiB3aGVuIHRvcC5jaGlsZHJlbltjaGlsZF0udHJlZT9cbiAgICAgICAgICAgICAgICBmaWZvLnB1c2ggdG9wLmNoaWxkcmVuW2NoaWxkXS50cmVlXG4gICAgICAgIGl0ZW1zXG5cbiAgICAjIFJldHVybnMgYSAqKmNsb25lZCoqIGBRdWFkdHJlZWAgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIG9ubHkgdGhlIGVsZW1lbnRzIHRoYXQgdmFsaWRhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICBmaWx0ZXI6IChwcmVkaWNhdGUpIC0+XG4gICAgICAgIGRlZXBjbG9uZSA9ICh0YXJnZXQpIC0+XG4gICAgICAgICAgICBjb3B5Y2F0ID0gbmV3IFF1YWR0cmVlIHg6IHRhcmdldC54LCB5OiB0YXJnZXQueSwgd2lkdGg6IHRhcmdldC53aWR0aCwgaGVpZ2h0OiB0YXJnZXQuaGVpZ2h0LCBtYXhFbGVtZW50czogdGFyZ2V0Lm1heEVsZW1lbnRzXG4gICAgICAgICAgICBjb3B5Y2F0LnNpemUgPSAwXG4gICAgICAgICAgICBmb3IgY2hpbGQgb2YgdGFyZ2V0LmNoaWxkcmVuIHdoZW4gdGFyZ2V0LmNoaWxkcmVuW2NoaWxkXS50cmVlP1xuICAgICAgICAgICAgICAgIGNvcHljYXQuY2hpbGRyZW5bY2hpbGRdLnRyZWUgPSBkZWVwY2xvbmUgdGFyZ2V0LmNoaWxkcmVuW2NoaWxkXS50cmVlXG4gICAgICAgICAgICAgICAgY29weWNhdC5zaXplICs9IGNvcHljYXQuY2hpbGRyZW5bY2hpbGRdLnRyZWU/LnNpemUgPyAwXG5cbiAgICAgICAgICAgIGZvciBpdGVtIGluIHRhcmdldC5vdmVyc2l6ZWQgd2hlbiBub3QgcHJlZGljYXRlPyBvciBwcmVkaWNhdGU/KGl0ZW0pXG4gICAgICAgICAgICAgICAgY29weWNhdC5vdmVyc2l6ZWQucHVzaCBpdGVtXG4gICAgICAgICAgICBmb3IgaXRlbSBpbiB0YXJnZXQuY29udGVudHMgd2hlbiBub3QgcHJlZGljYXRlPyBvciBwcmVkaWNhdGU/KGl0ZW0pXG4gICAgICAgICAgICAgICAgY29weWNhdC5jb250ZW50cy5wdXNoIGl0ZW1cblxuICAgICAgICAgICAgY29weWNhdC5zaXplICs9IGNvcHljYXQub3ZlcnNpemVkLmxlbmd0aCArIGNvcHljYXQuY29udGVudHMubGVuZ3RoXG4gICAgICAgICAgICBpZiBjb3B5Y2F0LnNpemUgaXMgMCB0aGVuIG51bGwgZWxzZSBjb3B5Y2F0XG5cbiAgICAgICAgZGVlcGNsb25lIEBcblxuICAgICMgVmlzaXRzIGVhY2ggdHJlZSAmIHN1YnRyZWUgY29udGFpbmVkIGluIHRoZSBgUXVhZHRyZWVgIG9iamVjdC5cbiAgICAjIEZvciBlYWNoIG5vZGUsIHBlcmZvcm1zIHRoZSBgYWN0aW9uYCBmdW5jdGlvbiwgaW5zaWRlIHdoaWNoIGB0aGlzYGlzIGJpbmRlZCB0byB0aGUgbm9kZSB0cmVlIG9iamVjdC5cbiAgICB2aXNpdDogKGFjdGlvbikgLT5cbiAgICAgICAgZmlmbyA9IFtAXVxuXG4gICAgICAgIHdoaWxlIGZpZm8ubGVuZ3RoID4gMFxuICAgICAgICAgICAgdGhhdCA9IGZpZm8uc3BsaWNlKDAsIDEpWzBdXG4gICAgICAgICAgICBhY3Rpb24uYmluZCh0aGF0KSgpXG5cbiAgICAgICAgICAgIGZvciBjaGlsZCBvZiB0aGF0LmNoaWxkcmVuIHdoZW4gdGhhdC5jaGlsZHJlbltjaGlsZF0udHJlZT9cbiAgICAgICAgICAgICAgICBmaWZvLnB1c2ggdGhhdC5jaGlsZHJlbltjaGlsZF0udHJlZVxuICAgICAgICBAXG5cbiMgUmVxdWlyZSBleHBvcnQuXG5tb2R1bGU/LmV4cG9ydHMgPSBRdWFkdHJlZVxuIiwidmFyIFF1YWR0cmVlO1xuXG5RdWFkdHJlZSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGN1bGF0ZURpcmVjdGlvbiwgZ2V0Q2VudGVyLCBpc092ZXJzaXplZCwgb2JzZXJ2ZSwgdmFsaWRhdGVFbGVtZW50O1xuXG4gIGZ1bmN0aW9uIFF1YWR0cmVlKGFyZykge1xuICAgIHZhciBjaGlsZCwgdGhhdDtcbiAgICB0aGlzLnggPSBhcmcueCwgdGhpcy55ID0gYXJnLnksIHRoaXMud2lkdGggPSBhcmcud2lkdGgsIHRoaXMuaGVpZ2h0ID0gYXJnLmhlaWdodCwgdGhpcy5tYXhFbGVtZW50cyA9IGFyZy5tYXhFbGVtZW50cztcbiAgICBpZiAoKHRoaXMud2lkdGggPT0gbnVsbCkgfHwgKHRoaXMuaGVpZ2h0ID09IG51bGwpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHF1YWR0cmVlIGRpbWVuc2lvbnMuXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy54ID09IG51bGwpIHtcbiAgICAgIHRoaXMueCA9IDA7XG4gICAgfVxuICAgIGlmICh0aGlzLnkgPT0gbnVsbCkge1xuICAgICAgdGhpcy55ID0gMDtcbiAgICB9XG4gICAgaWYgKHRoaXMubWF4RWxlbWVudHMgPT0gbnVsbCkge1xuICAgICAgdGhpcy5tYXhFbGVtZW50cyA9IDE7XG4gICAgfVxuICAgIHRoaXMuY29udGVudHMgPSBbXTtcbiAgICB0aGlzLm92ZXJzaXplZCA9IFtdO1xuICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgaWYgKHRoaXMueCA8IDAgfHwgdGhpcy55IDwgMCB8fCB0aGlzLndpZHRoIDwgMSB8fCB0aGlzLmhlaWdodCA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpbWVuc2lvbnMgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2Vycy5cIik7XG4gICAgfVxuICAgIGlmICh0aGlzLm1heEVsZW1lbnRzIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG1heGltdW0gb2YgZWxlbWVudHMgYnkgbGVhZiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci5cIik7XG4gICAgfVxuICAgIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuY2hpbGRyZW4gPSB7XG4gICAgICBcIk5XXCI6IHtcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFF1YWR0cmVlKHtcbiAgICAgICAgICAgIHg6IHRoYXQueCxcbiAgICAgICAgICAgIHk6IHRoYXQueSxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLm1heChNYXRoLmZsb29yKHRoYXQud2lkdGggLyAyKSwgMSksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4KE1hdGguZmxvb3IodGhhdC5oZWlnaHQgLyAyKSwgMSksXG4gICAgICAgICAgICBtYXhFbGVtZW50czogdGhhdC5tYXhFbGVtZW50c1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmVlOiBudWxsXG4gICAgICB9LFxuICAgICAgXCJORVwiOiB7XG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBRdWFkdHJlZSh7XG4gICAgICAgICAgICB4OiB0aGF0LnggKyBNYXRoLm1heChNYXRoLmZsb29yKHRoYXQud2lkdGggLyAyKSwgMSksXG4gICAgICAgICAgICB5OiB0aGF0LnksXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5jZWlsKHRoYXQud2lkdGggLyAyKSxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgoTWF0aC5mbG9vcih0aGF0LmhlaWdodCAvIDIpLCAxKSxcbiAgICAgICAgICAgIG1heEVsZW1lbnRzOiB0aGF0Lm1heEVsZW1lbnRzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyZWU6IG51bGxcbiAgICAgIH0sXG4gICAgICBcIlNXXCI6IHtcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFF1YWR0cmVlKHtcbiAgICAgICAgICAgIHg6IHRoYXQueCxcbiAgICAgICAgICAgIHk6IHRoYXQueSArIE1hdGgubWF4KE1hdGguZmxvb3IodGhhdC5oZWlnaHQgLyAyKSwgMSksXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5tYXgoTWF0aC5mbG9vcih0aGF0LndpZHRoIC8gMiksIDEpLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwodGhhdC5oZWlnaHQgLyAyKSxcbiAgICAgICAgICAgIG1heEVsZW1lbnRzOiB0aGF0Lm1heEVsZW1lbnRzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyZWU6IG51bGxcbiAgICAgIH0sXG4gICAgICBcIlNFXCI6IHtcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFF1YWR0cmVlKHtcbiAgICAgICAgICAgIHg6IHRoYXQueCArIE1hdGgubWF4KE1hdGguZmxvb3IodGhhdC53aWR0aCAvIDIpLCAxKSxcbiAgICAgICAgICAgIHk6IHRoYXQueSArIE1hdGgubWF4KE1hdGguZmxvb3IodGhhdC5oZWlnaHQgLyAyKSwgMSksXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5jZWlsKHRoYXQud2lkdGggLyAyKSxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKHRoYXQuaGVpZ2h0IC8gMiksXG4gICAgICAgICAgICBtYXhFbGVtZW50czogdGhhdC5tYXhFbGVtZW50c1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmVlOiBudWxsXG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGNoaWxkIGluIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMuY2hpbGRyZW5bY2hpbGRdLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy50cmVlICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50cmVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudHJlZSA9IHRoaXMuY3JlYXRlKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJlZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBnZXRDZW50ZXIgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgdmFyIHJlZiwgcmVmMTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5mbG9vcigoKHJlZiA9IGl0ZW0ud2lkdGgpICE9IG51bGwgPyByZWYgOiAxKSAvIDIpICsgaXRlbS54LFxuICAgICAgeTogTWF0aC5mbG9vcigoKHJlZjEgPSBpdGVtLmhlaWdodCkgIT0gbnVsbCA/IHJlZjEgOiAxKSAvIDIpICsgaXRlbS55XG4gICAgfTtcbiAgfTtcblxuICB2YWxpZGF0ZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgaWYgKCF0eXBlb2YgZWxlbWVudCA9PT0gXCJvYmplY3RcIiB8fCAoZWxlbWVudC54ID09IG51bGwpIHx8IChlbGVtZW50LnkgPT0gbnVsbCkgfHwgZWxlbWVudC54IDwgMCB8fCBlbGVtZW50LnkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYmplY3QgbXVzdCBjb250YWluIHggb3IgeSBwb3NpdGlvbnMgYXMgYXJndW1lbnRzLCBhbmQgdGhleSBtdXN0IGJlIHBvc2l0aXZlIGludGVnZXJzLlwiKTtcbiAgICB9XG4gICAgaWYgKChlbGVtZW50ICE9IG51bGwgPyBlbGVtZW50LndpZHRoIDogdm9pZCAwKSA8IDAgfHwgKGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQuaGVpZ2h0IDogdm9pZCAwKSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldpZHRoIGFuZCBoZWlnaHQgYXJndW1lbnRzIG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlcnMuXCIpO1xuICAgIH1cbiAgfTtcblxuICBjYWxjdWxhdGVEaXJlY3Rpb24gPSBmdW5jdGlvbihlbGVtZW50LCB0cmVlKSB7XG4gICAgZWxlbWVudDtcbiAgICB2YXIgcXVhZENlbnRlcjtcbiAgICBxdWFkQ2VudGVyID0gZ2V0Q2VudGVyKHRyZWUpO1xuICAgIGlmIChlbGVtZW50LnggPCBxdWFkQ2VudGVyLngpIHtcbiAgICAgIGlmIChlbGVtZW50LnkgPCBxdWFkQ2VudGVyLnkpIHtcbiAgICAgICAgcmV0dXJuIFwiTldcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlNXXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChlbGVtZW50LnkgPCBxdWFkQ2VudGVyLnkpIHtcbiAgICAgICAgcmV0dXJuIFwiTkVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlNFXCI7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGlzT3ZlcnNpemVkID0gZnVuY3Rpb24oZWxlbWVudCwgdHJlZSkge1xuICAgIHZhciByZWYsIHJlZjE7XG4gICAgcmV0dXJuIGVsZW1lbnQueCA8IHRyZWUueCB8fCBlbGVtZW50LnggKyAoKHJlZiA9IGVsZW1lbnQud2lkdGgpICE9IG51bGwgPyByZWYgOiAwKSA+PSB0cmVlLnggKyB0cmVlLndpZHRoIHx8IGVsZW1lbnQueSA8IHRyZWUueSB8fCBlbGVtZW50LnkgKyAoKHJlZjEgPSBlbGVtZW50LmhlaWdodCkgIT0gbnVsbCA/IHJlZjEgOiAwKSA+PSB0cmVlLnkgKyB0cmVlLmhlaWdodDtcbiAgfTtcblxuICBvYnNlcnZlID0gZnVuY3Rpb24oaXRlbSwgdHJlZSkge1xuICAgIHZhciB3cml0ZUFjY2Vzc29ycztcbiAgICB3cml0ZUFjY2Vzc29ycyA9IGZ1bmN0aW9uKHByb3BOYW1lKSB7XG4gICAgICBpdGVtW1wiX1wiICsgcHJvcE5hbWVdID0gaXRlbVtwcm9wTmFtZV07XG4gICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0ZW0sIHByb3BOYW1lLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdHJlZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgdGhpc1tcIl9cIiArIHByb3BOYW1lXSA9IHZhbDtcbiAgICAgICAgICByZXR1cm4gdHJlZS5wdXNoKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW1wiX1wiICsgcHJvcE5hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgd3JpdGVBY2Nlc3NvcnMoXCJ4XCIpO1xuICAgIHdyaXRlQWNjZXNzb3JzKFwieVwiKTtcbiAgICB3cml0ZUFjY2Vzc29ycyhcIndpZHRoXCIpO1xuICAgIHJldHVybiB3cml0ZUFjY2Vzc29ycyhcImhlaWdodFwiKTtcbiAgfTtcblxuICBRdWFkdHJlZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGl0ZW0sIGVuYWJsZU9ic2VydmUpIHtcbiAgICB2YXIgYywgZWxlbWVudCwgZmlmbywgaiwgbGVuLCByZWYsIHJlbGF0ZWRDaGlsZCwgdG9wLCB0cmVlO1xuICAgIHZhbGlkYXRlRWxlbWVudChpdGVtKTtcbiAgICBpZiAoZW5hYmxlT2JzZXJ2ZSkge1xuICAgICAgb2JzZXJ2ZShpdGVtLCB0aGlzKTtcbiAgICB9XG4gICAgZmlmbyA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJlZTogdGhpcyxcbiAgICAgICAgZWxlbWVudDogaXRlbVxuICAgICAgfVxuICAgIF07XG4gICAgd2hpbGUgKGZpZm8ubGVuZ3RoID4gMCkge1xuICAgICAgdG9wID0gZmlmby5zcGxpY2UoMCwgMSlbMF07XG4gICAgICB0cmVlID0gdG9wLnRyZWU7XG4gICAgICBlbGVtZW50ID0gdG9wLmVsZW1lbnQ7XG4gICAgICB0cmVlLnNpemUrKztcbiAgICAgIHJlbGF0ZWRDaGlsZCA9IHRyZWUuY2hpbGRyZW5bY2FsY3VsYXRlRGlyZWN0aW9uKGVsZW1lbnQsIHRyZWUpXTtcbiAgICAgIGlmICh0cmVlLndpZHRoID09PSAxIHx8IHRyZWUuaGVpZ2h0ID09PSAxIHx8IGlzT3ZlcnNpemVkKGVsZW1lbnQsIHJlbGF0ZWRDaGlsZC5jcmVhdGUoKSkpIHtcbiAgICAgICAgdHJlZS5vdmVyc2l6ZWQucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAodHJlZS5zaXplIDw9IHRyZWUubWF4RWxlbWVudHMpIHtcbiAgICAgICAgdHJlZS5jb250ZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlmby5wdXNoKHtcbiAgICAgICAgICB0cmVlOiByZWxhdGVkQ2hpbGQuZ2V0KCksXG4gICAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgcmVmID0gdHJlZS5jb250ZW50cztcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgYyA9IHJlZltqXTtcbiAgICAgICAgICBmaWZvLnB1c2goe1xuICAgICAgICAgICAgdHJlZTogdHJlZS5jaGlsZHJlbltjYWxjdWxhdGVEaXJlY3Rpb24oYywgdHJlZSldLmdldCgpLFxuICAgICAgICAgICAgZWxlbWVudDogY1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyZWUuY29udGVudHMgPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgUXVhZHRyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB2YXIgaW5kZXgsIHJlbGF0ZWRDaGlsZDtcbiAgICB2YWxpZGF0ZUVsZW1lbnQoaXRlbSk7XG4gICAgaW5kZXggPSB0aGlzLm92ZXJzaXplZC5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLm92ZXJzaXplZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5zaXplLS07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW5kZXggPSB0aGlzLmNvbnRlbnRzLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMub3ZlcnNpemVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLnNpemUtLTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZWxhdGVkQ2hpbGQgPSB0aGlzLmNoaWxkcmVuW2NhbGN1bGF0ZURpcmVjdGlvbihpdGVtLCB0aGlzKV07XG4gICAgaWYgKHJlbGF0ZWRDaGlsZC50cmVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHJlbGF0ZWRDaGlsZC50cmVlLnJlbW92ZShpdGVtKSkge1xuICAgICAgdGhpcy5zaXplLS07XG4gICAgICBpZiAocmVsYXRlZENoaWxkLnRyZWUuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZWxhdGVkQ2hpbGQudHJlZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBRdWFkdHJlZS5wcm90b3R5cGUuY29sbGlkaW5nID0gZnVuY3Rpb24oaXRlbSwgY29sbGlzaW9uRnVuY3Rpb24pIHtcbiAgICB2YXIgY2hpbGQsIGVsdCwgZmlmbywgaXRlbXMsIGosIGssIGxlbiwgbGVuMSwgcmVmLCByZWYxLCByZWxhdGVkQ2hpbGQsIHRvcDtcbiAgICB2YWxpZGF0ZUVsZW1lbnQoaXRlbSk7XG4gICAgaWYgKGNvbGxpc2lvbkZ1bmN0aW9uID09IG51bGwpIHtcbiAgICAgIGNvbGxpc2lvbkZ1bmN0aW9uID0gZnVuY3Rpb24oZWx0MSwgZWx0Mikge1xuICAgICAgICB2YXIgcmVmLCByZWYxLCByZWYyLCByZWYzO1xuICAgICAgICByZXR1cm4gIShlbHQxLnggPiBlbHQyLnggKyAoKHJlZiA9IGVsdDIud2lkdGgpICE9IG51bGwgPyByZWYgOiAwKSB8fCBlbHQxLnggKyAoKHJlZjEgPSBlbHQxLndpZHRoKSAhPSBudWxsID8gcmVmMSA6IDApIDwgZWx0Mi54IHx8IGVsdDEueSA+IGVsdDIueSArICgocmVmMiA9IGVsdDIuaGVpZ2h0KSAhPSBudWxsID8gcmVmMiA6IDApIHx8IGVsdDEueSArICgocmVmMyA9IGVsdDEuaGVpZ2h0KSAhPSBudWxsID8gcmVmMyA6IDApIDwgZWx0Mi55KTtcbiAgICAgIH07XG4gICAgfVxuICAgIGl0ZW1zID0gW107XG4gICAgZmlmbyA9IFt0aGlzXTtcbiAgICB3aGlsZSAoZmlmby5sZW5ndGggPiAwKSB7XG4gICAgICB0b3AgPSBmaWZvLnNwbGljZSgwLCAxKVswXTtcbiAgICAgIHJlZiA9IHRvcC5vdmVyc2l6ZWQ7XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgZWx0ID0gcmVmW2pdO1xuICAgICAgICBpZiAoZWx0ICE9PSBpdGVtICYmIGNvbGxpc2lvbkZ1bmN0aW9uKGl0ZW0sIGVsdCkpIHtcbiAgICAgICAgICBpdGVtcy5wdXNoKGVsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZjEgPSB0b3AuY29udGVudHM7XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgZWx0ID0gcmVmMVtrXTtcbiAgICAgICAgaWYgKGVsdCAhPT0gaXRlbSAmJiBjb2xsaXNpb25GdW5jdGlvbihpdGVtLCBlbHQpKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChlbHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWxhdGVkQ2hpbGQgPSB0b3AuY2hpbGRyZW5bY2FsY3VsYXRlRGlyZWN0aW9uKGl0ZW0sIHRvcCldO1xuICAgICAgaWYgKGlzT3ZlcnNpemVkKGl0ZW0sIHJlbGF0ZWRDaGlsZC5jcmVhdGUoKSkpIHtcbiAgICAgICAgZm9yIChjaGlsZCBpbiB0b3AuY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAodG9wLmNoaWxkcmVuW2NoaWxkXS50cmVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZpZm8ucHVzaCh0b3AuY2hpbGRyZW5bY2hpbGRdLnRyZWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWxhdGVkQ2hpbGQudHJlZSAhPSBudWxsKSB7XG4gICAgICAgIGZpZm8ucHVzaChyZWxhdGVkQ2hpbGQudHJlZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICBRdWFkdHJlZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMud2hlcmUocGFyYW1zKTtcbiAgfTtcblxuICBRdWFkdHJlZS5wcm90b3R5cGUud2hlcmUgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICB2YXIgY2hlY2ssIGVsdCwgZmlmbywgaXRlbXMsIGosIGssIGtleSwgbGVuLCBsZW4xLCByZWYsIHJlZjEsIHJlbGF0ZWRDaGlsZCwgdG9wO1xuICAgIHZhbGlkYXRlRWxlbWVudChwYXJhbXMpO1xuICAgIGl0ZW1zID0gW107XG4gICAgZmlmbyA9IFt0aGlzXTtcbiAgICB3aGlsZSAoZmlmby5sZW5ndGggPiAwKSB7XG4gICAgICB0b3AgPSBmaWZvLnNwbGljZSgwLCAxKVswXTtcbiAgICAgIHJlZiA9IHRvcC5vdmVyc2l6ZWQ7XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgZWx0ID0gcmVmW2pdO1xuICAgICAgICBjaGVjayA9IHRydWU7XG4gICAgICAgIGZvciAoa2V5IGluIHBhcmFtcykge1xuICAgICAgICAgIGlmIChwYXJhbXNba2V5XSAhPT0gZWx0W2tleV0pIHtcbiAgICAgICAgICAgIGNoZWNrID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVjaykge1xuICAgICAgICAgIGl0ZW1zLnB1c2goZWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVmMSA9IHRvcC5jb250ZW50cztcbiAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICBlbHQgPSByZWYxW2tdO1xuICAgICAgICBjaGVjayA9IHRydWU7XG4gICAgICAgIGZvciAoa2V5IGluIHBhcmFtcykge1xuICAgICAgICAgIGlmIChwYXJhbXNba2V5XSAhPT0gZWx0W2tleV0pIHtcbiAgICAgICAgICAgIGNoZWNrID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVjaykge1xuICAgICAgICAgIGl0ZW1zLnB1c2goZWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVsYXRlZENoaWxkID0gdG9wLmNoaWxkcmVuW2NhbGN1bGF0ZURpcmVjdGlvbihwYXJhbXMsIHRvcCldO1xuICAgICAgaWYgKHJlbGF0ZWRDaGlsZC50cmVlICE9IG51bGwpIHtcbiAgICAgICAgZmlmby5wdXNoKHJlbGF0ZWRDaGlsZC50cmVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIFF1YWR0cmVlLnByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgdmFyIGNoaWxkLCBmaWZvLCBpLCBqLCBrLCBsZW4sIGxlbjEsIHJlZiwgcmVmMSwgdG9wO1xuICAgIGZpZm8gPSBbdGhpc107XG4gICAgd2hpbGUgKGZpZm8ubGVuZ3RoID4gMCkge1xuICAgICAgdG9wID0gZmlmby5zcGxpY2UoMCwgMSlbMF07XG4gICAgICByZWYgPSB0b3Aub3ZlcnNpemVkO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGkgPSByZWZbal07XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBhY3Rpb24oaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZjEgPSB0b3AuY29udGVudHM7XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgaSA9IHJlZjFba107XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBhY3Rpb24oaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY2hpbGQgaW4gdG9wLmNoaWxkcmVuKSB7XG4gICAgICAgIGlmICh0b3AuY2hpbGRyZW5bY2hpbGRdLnRyZWUgIT0gbnVsbCkge1xuICAgICAgICAgIGZpZm8ucHVzaCh0b3AuY2hpbGRyZW5bY2hpbGRdLnRyZWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFF1YWR0cmVlLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgdmFyIGNoaWxkLCBmaWZvLCBpLCBpdGVtcywgaiwgaywgbGVuLCBsZW4xLCByZWYsIHJlZjEsIHRvcDtcbiAgICBmaWZvID0gW3RoaXNdO1xuICAgIGl0ZW1zID0gW107XG4gICAgd2hpbGUgKGZpZm8ubGVuZ3RoID4gMCkge1xuICAgICAgdG9wID0gZmlmby5zcGxpY2UoMCwgMSlbMF07XG4gICAgICByZWYgPSB0b3Aub3ZlcnNpemVkO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGkgPSByZWZbal07XG4gICAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSBcImZ1bmN0aW9uXCIgPyBwcmVkaWNhdGUoaSkgOiB2b2lkIDApIHtcbiAgICAgICAgICBpdGVtcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWYxID0gdG9wLmNvbnRlbnRzO1xuICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgIGkgPSByZWYxW2tdO1xuICAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSA9PT0gXCJmdW5jdGlvblwiID8gcHJlZGljYXRlKGkpIDogdm9pZCAwKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjaGlsZCBpbiB0b3AuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHRvcC5jaGlsZHJlbltjaGlsZF0udHJlZSAhPSBudWxsKSB7XG4gICAgICAgICAgZmlmby5wdXNoKHRvcC5jaGlsZHJlbltjaGlsZF0udHJlZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIFF1YWR0cmVlLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICB2YXIgZGVlcGNsb25lO1xuICAgIGRlZXBjbG9uZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgdmFyIGNoaWxkLCBjb3B5Y2F0LCBpdGVtLCBqLCBrLCBsZW4sIGxlbjEsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMztcbiAgICAgIGNvcHljYXQgPSBuZXcgUXVhZHRyZWUoe1xuICAgICAgICB4OiB0YXJnZXQueCxcbiAgICAgICAgeTogdGFyZ2V0LnksXG4gICAgICAgIHdpZHRoOiB0YXJnZXQud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGFyZ2V0LmhlaWdodCxcbiAgICAgICAgbWF4RWxlbWVudHM6IHRhcmdldC5tYXhFbGVtZW50c1xuICAgICAgfSk7XG4gICAgICBjb3B5Y2F0LnNpemUgPSAwO1xuICAgICAgZm9yIChjaGlsZCBpbiB0YXJnZXQuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCEodGFyZ2V0LmNoaWxkcmVuW2NoaWxkXS50cmVlICE9IG51bGwpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29weWNhdC5jaGlsZHJlbltjaGlsZF0udHJlZSA9IGRlZXBjbG9uZSh0YXJnZXQuY2hpbGRyZW5bY2hpbGRdLnRyZWUpO1xuICAgICAgICBjb3B5Y2F0LnNpemUgKz0gKHJlZiA9IChyZWYxID0gY29weWNhdC5jaGlsZHJlbltjaGlsZF0udHJlZSkgIT0gbnVsbCA/IHJlZjEuc2l6ZSA6IHZvaWQgMCkgIT0gbnVsbCA/IHJlZiA6IDA7XG4gICAgICB9XG4gICAgICByZWYyID0gdGFyZ2V0Lm92ZXJzaXplZDtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgaXRlbSA9IHJlZjJbal07XG4gICAgICAgIGlmICgocHJlZGljYXRlID09IG51bGwpIHx8ICh0eXBlb2YgcHJlZGljYXRlID09PSBcImZ1bmN0aW9uXCIgPyBwcmVkaWNhdGUoaXRlbSkgOiB2b2lkIDApKSB7XG4gICAgICAgICAgY29weWNhdC5vdmVyc2l6ZWQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVmMyA9IHRhcmdldC5jb250ZW50cztcbiAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWYzLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICBpdGVtID0gcmVmM1trXTtcbiAgICAgICAgaWYgKChwcmVkaWNhdGUgPT0gbnVsbCkgfHwgKHR5cGVvZiBwcmVkaWNhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHByZWRpY2F0ZShpdGVtKSA6IHZvaWQgMCkpIHtcbiAgICAgICAgICBjb3B5Y2F0LmNvbnRlbnRzLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvcHljYXQuc2l6ZSArPSBjb3B5Y2F0Lm92ZXJzaXplZC5sZW5ndGggKyBjb3B5Y2F0LmNvbnRlbnRzLmxlbmd0aDtcbiAgICAgIGlmIChjb3B5Y2F0LnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29weWNhdDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBkZWVwY2xvbmUodGhpcyk7XG4gIH07XG5cbiAgUXVhZHRyZWUucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgdmFyIGNoaWxkLCBmaWZvLCB0aGF0O1xuICAgIGZpZm8gPSBbdGhpc107XG4gICAgd2hpbGUgKGZpZm8ubGVuZ3RoID4gMCkge1xuICAgICAgdGhhdCA9IGZpZm8uc3BsaWNlKDAsIDEpWzBdO1xuICAgICAgYWN0aW9uLmJpbmQodGhhdCkoKTtcbiAgICAgIGZvciAoY2hpbGQgaW4gdGhhdC5jaGlsZHJlbikge1xuICAgICAgICBpZiAodGhhdC5jaGlsZHJlbltjaGlsZF0udHJlZSAhPSBudWxsKSB7XG4gICAgICAgICAgZmlmby5wdXNoKHRoYXQuY2hpbGRyZW5bY2hpbGRdLnRyZWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBRdWFkdHJlZTtcblxufSkoKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlICE9PSBudWxsKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gUXVhZHRyZWU7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
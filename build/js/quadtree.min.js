var Quadtree;Quadtree=function(){function e(t){var n,i;if(this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this.maxElements=t.maxElements,null==this.width||null==this.height)throw new Error("Missing quadtree dimensions.");if(null==this.x&&(this.x=0),null==this.y&&(this.y=0),null==this.maxElements&&(this.maxElements=1),this.contents=[],this.oversized=[],this.size=0,this.x<0||this.y<0||this.width<1||this.height<1)throw new Error("Dimensions and coordinates must be positive integers.");if(this.maxElements<1)throw new Error("The maximum number of elements before a split must be a positive integer.");i=this,this.children={NW:{create:function(){return new e({x:i.x,y:i.y,width:Math.max(Math.floor(i.width/2),1),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},NE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y,width:Math.ceil(i.width/2),height:Math.max(Math.floor(i.height/2),1),maxElements:i.maxElements})},tree:null},SW:{create:function(){return new e({x:i.x,y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.max(Math.floor(i.width/2),1),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null},SE:{create:function(){return new e({x:i.x+Math.max(Math.floor(i.width/2),1),y:i.y+Math.max(Math.floor(i.height/2),1),width:Math.ceil(i.width/2),height:Math.ceil(i.height/2),maxElements:i.maxElements})},tree:null}};for(n in this.children)this.children[n].get=function(){return null!=this.tree?this.tree:(this.tree=this.create(),this.tree)}}var t,n,i,r,h;return n=function(e){var t,n;return{x:Math.floor((null!=(t=e.width)?t:1)/2)+e.x,y:Math.floor((null!=(n=e.height)?n:1)/2)+e.y}},h=function(e){if(null==e.x||null==e.y||e.x<0||e.y<0)throw new Error("Object must contain x or y positions as arguments, and they must be positive integers.");if((null!=e?e.width:void 0)<0||(null!=e?e.height:void 0)<0)throw new Error("Width and height must be positive integers.")},t=function(e,t){var i;return i=n(t),e.x<i.x?e.y<i.y?"NW":"SW":e.y<i.y?"NE":"SE"},i=function(e,t){var n,i;return e.x<t.x||e.x+(null!=(n=e.width)?n:0)>=t.x+t.width||e.y<t.y||e.y+(null!=(i=e.height)?i:0)>=t.y+t.height},r=function(e,t){var n;return n=function(n){return e["_"+n]=e[n],Object.defineProperty(e,n,{set:function(e){return t.remove(this),this["_"+n]=e,t.push(this)},get:function(){return this["_"+n]},configurable:!0})},n("x"),n("y"),n("width"),n("height")},e.prototype.push=function(e,n){var l,o,s,u,c,f,d,a,p;for(h(e),n&&r(e,this),s=[{tree:this,element:e}];s.length>0;)if(a=s.splice(0,1)[0],p=a.tree,o=a.element,p.size++,d=p.children[t(o,p)],1===p.width||1===p.height||i(o,d.create()))p.oversized.push(o);else if(p.size<=p.maxElements)p.contents.push(o);else{for(s.push({tree:d.get(),element:o}),f=p.contents,u=0,c=f.length;u<c;u++)l=f[u],s.push({tree:p.children[t(l,p)].get(),element:l});p.contents=[]}return this},e.prototype.remove=function(e){var n,i;return h(e),n=this.oversized.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(n=this.contents.indexOf(e),n>-1?(this.oversized.splice(n,1),this.size--,!0):(i=this.children[t(e,this)],null!=i.tree&&(!!i.tree.remove(e)&&(this.size--,0===i.tree.size&&(i.tree=null),!0))))},e.prototype.colliding=function(e,n){var r,l,o,s,u,c,f,d,a,p,m,x;for(h(e),null==n&&(n=function(e,t){var n,i,r,h;return!(e.x>t.x+(null!=(n=t.width)?n:0)||e.x+(null!=(i=e.width)?i:0)<t.x||e.y>t.y+(null!=(r=t.height)?r:0)||e.y+(null!=(h=e.height)?h:0)<t.y)}),s=[],o=[this];o.length>0;){for(x=o.splice(0,1)[0],a=x.oversized,u=0,f=a.length;u<f;u++)l=a[u],l!==e&&n(e,l)&&s.push(l);for(p=x.contents,c=0,d=p.length;c<d;c++)l=p[c],l!==e&&n(e,l)&&s.push(l);if(m=x.children[t(e,x)],i(e,m.create()))for(r in x.children)null!=x.children[r].tree&&o.push(x.children[r].tree);else null!=m.tree&&o.push(m.tree)}return s},e.prototype.get=function(e){return this.where(e)},e.prototype.where=function(e){var n,i,r,l,o,s,u,c,f,d,a,p,m;if("object"==typeof e&&null==e.x&&null==e.y)return this.find(function(t){var n,i;n=!0;for(i in e)e[i]!==t[i]&&(n=!1);return n});for(h(e),l=[],r=[this];r.length>0;){for(m=r.splice(0,1)[0],d=m.oversized,o=0,c=d.length;o<c;o++){i=d[o],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}for(a=m.contents,s=0,f=a.length;s<f;s++){i=a[s],n=!0;for(u in e)e[u]!==i[u]&&(n=!1);n&&l.push(i)}p=m.children[t(e,m)],null!=p.tree&&r.push(p.tree)}return l},e.prototype.each=function(e){var t,n,i,r,h,l,o,s,u,c;for(n=[this];n.length>0;){for(c=n.splice(0,1)[0],s=c.oversized,r=0,l=s.length;r<l;r++)i=s[r],"function"==typeof e&&e(i);for(u=c.contents,h=0,o=u.length;h<o;h++)i=u[h],"function"==typeof e&&e(i);for(t in c.children)null!=c.children[t].tree&&n.push(c.children[t].tree)}return this},e.prototype.find=function(e){var t,n,i,r,h,l,o,s,u,c,f;for(n=[this],r=[];n.length>0;){for(f=n.splice(0,1)[0],u=f.oversized,h=0,o=u.length;h<o;h++)i=u[h],("function"==typeof e?e(i):void 0)&&r.push(i);for(c=f.contents,l=0,s=c.length;l<s;l++)i=c[l],("function"==typeof e?e(i):void 0)&&r.push(i);for(t in f.children)null!=f.children[t].tree&&n.push(f.children[t].tree)}return r},e.prototype.filter=function(t){var n;return(n=function(i){var r,h,l,o,s,u,c,f,d,a,p;h=new e({x:i.x,y:i.y,width:i.width,height:i.height,maxElements:i.maxElements}),h.size=0;for(r in i.children)null!=i.children[r].tree&&(h.children[r].tree=n(i.children[r].tree),h.size+=null!=(f=null!=(d=h.children[r].tree)?d.size:void 0)?f:0);for(a=i.oversized,o=0,u=a.length;o<u;o++)l=a[o],(null==t||("function"==typeof t?t(l):void 0))&&h.oversized.push(l);for(p=i.contents,s=0,c=p.length;s<c;s++)l=p[s],(null==t||("function"==typeof t?t(l):void 0))&&h.contents.push(l);return h.size+=h.oversized.length+h.contents.length,0===h.size?null:h})(this)},e.prototype.reject=function(e){return this.filter(function(t){return!("function"==typeof e?e(t):void 0)})},e.prototype.visit=function(e){var t,n,i;for(n=[this];n.length>0;){i=n.splice(0,1)[0],e.bind(i)();for(t in i.children)null!=i.children[t].tree&&n.push(i.children[t].tree)}return this},e}(),"undefined"!=typeof module&&null!==module&&(module.exports=Quadtree);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
